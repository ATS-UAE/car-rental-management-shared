!function(e){var t={};function o(i){if(t[i])return t[i].exports;var n=t[i]={i:i,l:!1,exports:{}};return e[i].call(n.exports,n,n.exports,o),n.l=!0,n.exports}o.m=e,o.c=t,o.d=function(e,t,i){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(o.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)o.d(i,n,function(t){return e[t]}.bind(null,n));return i},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=46)}([function(e,t,o){"use strict";function i(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=o(3),r=n(o(11)),s=n(o(12)),l=o(2);i(o(31)),i(o(32)),i(o(33)),i(o(34)),i(o(35)),i(o(36)),i(o(37)),i(o(38)),i(o(39)),i(o(40)),i(o(41)),i(o(42)),i(o(43));const c=o(31),d=o(32),u=o(33),p=o(34),f=o(35),h=o(36),g=o(37),m=o(38),y=o(39),w=o(40),v=o(41),R=o(42),b=o(43),E=new a.Sequelize(s.default.database.name,s.default.database.username,s.default.database.password,{logging:!1,host:s.default.database.host,port:parseInt(s.default.database.port),models:[c.Accident,d.AccidentUserStatus,u.Booking,p.Category,f.Client,h.ClientLocation,g.Location,m.ReplaceVehicle,y.User,w.UserVehicleCategory,v.Vehicle,R.VehicleCategory,b.VehicleIssue],...s.default.database.sequelize});E.authenticate().then(()=>I(E,{sync:{}})).then(()=>console.log("Connection has been established successfully.")).catch(e=>{console.error("Unable to connect to the database\n",e)});const I=async(e,t)=>{if(t.sync&&await e.sync(t.sync.options),0===(await y.User.findAll()).length){let e=await r.default.hash(s.default.database.password,10);await y.User.create({username:"root",password:e,firstName:"Root",lastName:"Account",email:"support@atsuae.net",role:l.Role.MASTER,mobileNumber:"",approved:!0})}};t.default={Accident:c.Accident,AccidentUserStatus:d.AccidentUserStatus,Booking:u.Booking,Category:p.Category,Client:f.Client,ClientLocation:h.ClientLocation,Location:g.Location,ReplaceVehicle:m.ReplaceVehicle,User:y.User,UserVehicleCategory:w.UserVehicleCategory,Vehicle:v.Vehicle,VehicleCategory:R.VehicleCategory,VehicleIssue:b.VehicleIssue}},function(e,t,o){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=i(o(30)),a=i(o(16)),r=i(o(26)),s=i(o(27)),l=o(52),c=o(2);var d=o(59);t.ResponseBuilder=d.default,t.pickAndMerge=(e,t,o=[])=>({...e,...s.default.pick(t,o)}),t.getArray=e=>e instanceof Array?e:[],t.pickFields=(e,t)=>{const o={};for(let i in e)t.indexOf(i)>=0&&(o[i]=e[i]);return o},t.exceptFields=(e,t)=>{let o={};for(let i in e)t.indexOf(i)<0&&(o[i]=e[i]);return o},t.convertSequelizeDatesToUnix=e=>{if(e instanceof Array)for(let o of e)t.convertSequelizeDatesToUnix(o);else if(e&&"object"==typeof e){const o=e.dataValues?e.dataValues:e;for(let e in o)o[e]instanceof Date?o[e]=n.default(o[e]).unix():"object"==typeof o[e]&&t.convertSequelizeDatesToUnix(o[e])}},t.sqlDateToMoment=e=>n.default(e,"YYYY-MM-DDTHH:mm:ss","UTC"),t.toMySQLDate=e=>n.default(e,"X").format("YYYY-MM-DD HH:mm:ss"),t.toUnix=e=>t.sqlDateToMoment(e).unix(),t.getStaticFilesPath=()=>a.default.join(process.env.CAR_RENTAL_MANAGEMENT_API_STORAGE_PATH),t.getFileURL=(e,t)=>new l.URL(`${process.env.SERVER_URL}/static/${e}/${t}`).href,t.getPathFromURL=e=>a.default.join(t.getStaticFilesPath(),e.replace(new RegExp(`^${process.env.SERVER_URL}/static`),"")),t.makeDirectoryIfNotExist=e=>new Promise((t,o)=>{r.default.mkdir(e,{recursive:!0},i=>{i?o(i):t(e)})}),t.deleteFileFromUrl=e=>r.default.promises.unlink(t.getPathFromURL(e)),t.convertDatesToUnix=e=>{const o=s.default.cloneDeep(e);for(const[e,i]of Object.entries(o))i instanceof Date?o[e]=n.default(i).unix():"object"==typeof i&&t.convertDatesToUnix(i);return o},t.getBookingStatus=e=>{let t=c.BookingStatus.UNKNOWN,o=n.default(),i=n.default(e.from,"X").isSameOrBefore(o),a=n.default(e.to,"X").isSameOrBefore(o);return e.approved?t=i&&!a?c.BookingStatus.ONGOING:a?c.BookingStatus.FINISHED:c.BookingStatus.APPROVED:null===e.approved?t=i?c.BookingStatus.EXPIRED:c.BookingStatus.PENDING:!1===e.approved&&(t=c.BookingStatus.DENIED),t},t.hasActiveBooking=(e,o)=>{if(e)for(const i of e){let e=t.getBookingStatus(i);if(!(e!==c.BookingStatus.PENDING&&e!==c.BookingStatus.ONGOING&&e!==c.BookingStatus.APPROVED||o&&o===i.id))return!0}return!1},t.isBookingTimeSlotTaken=(e,o,i,n)=>{let a=!1;for(const r of e)if(a=t.rangeOverlap(o,i,r.from,r.to),a&&!n||n!==r.id)return a;return a},t.rangeOverlap=(e,t,o,i)=>Math.max(e,o)<=Math.min(t,i),function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o(68))},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=o(53);t.Operation=i.default;var n=o(54);t.Resource=n.default;var a=o(55);t.Role=a.default;var r=o(56);t.BookingType=r.default;var s=o(57);t.BookingStatus=s.default;var l=o(58);t.BookingChargeUnit=l.default},function(e,t){e.exports=require("sequelize-typescript")},function(e,t){e.exports=require("express")},function(e,t,o){"use strict";function i(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}Object.defineProperty(t,"__esModule",{value:!0}),i(o(63)),i(o(64)),i(o(65)),i(o(66)),i(o(67))},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=o(1);t.default=function(e,t,o){if(e.user)o();else{let e=new i.ResponseBuilder;e.setMessage("You are not authorized. Please login."),e.setCode(401),e.setSuccess(!1),t.status(401),t.json(e)}}},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=o(60);t.InvalidPermissionException=i.default;var n=o(61);t.ResourceNotFoundException=n.default;var a=o(62);t.InvalidInputException=a.default},function(e,t,o){"use strict";var i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)Object.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});const n=i(o(78)),a=i(o(2)),{READ:r,UPDATE:s,DELETE:l,CREATE:c}=a.Operation,d=new n.default("Car Booking"),u=new n.Role(a.Role.MASTER),p=new n.Role(a.Role.ADMIN),f=new n.Role(a.Role.KEY_MANAGER),h=new n.Role(a.Role.GUEST),g=new n.Resource(a.Resource.VEHICLES),m=new n.Resource(a.Resource.LOCATIONS),y=new n.Resource(a.Resource.BOOKINGS),w=new n.Resource(a.Resource.USERS),v=new n.Resource(a.Resource.ACCIDENTS),R=new n.Resource(a.Resource.CATEGORIES),b=new n.Resource(a.Resource.CLIENTS);h.addPermission(new n.Action(c,y,({accessor:e,body:t})=>{try{return void 0!==e.id&&e.id===t.userId}catch(e){return console.error(e),!1}},["userId","paid","clientId"])),h.addPermission(new n.Action(c,v,({accessor:e,body:t})=>{try{return void 0!==e.id&&e.id===t.userId}catch(e){return console.error(e),!1}},["userId","bookingId","clientId"])),h.addPermission(new n.Action(r,y,({accessor:e,target:t})=>{try{return!(!e.id||e.id!==t.userId)}catch(e){return console.error(e),!1}})),h.addPermission(new n.Action(r,g,({accessor:e,target:t})=>{try{return!(!e.clientId||e.clientId!==t.clientId)}catch(e){return console.error(e),!1}},["bookingChargeUnitId","bookingChargeCount","bookingCharge"])),h.addPermission(new n.Action(r,m,({accessor:e,target:t})=>{try{return!(!e.clientId||!t.clients.find(t=>t.id===e.clientId))}catch(e){return console.error(e),!1}},["clientId"])),h.addPermission(new n.Action(r,R,({accessor:e,target:t})=>{try{return!(!e.clientId||e.clientId!==t.clientId)}catch(e){return console.error(e),!1}},["clientId"])),h.addPermission(new n.Action(s,y,({accessor:e,target:t})=>{try{return e.id===t.userId&&!1===t.approved}catch(e){return console.error(e),!1}})),h.addPermission(new n.Action(l,y,({accessor:e,target:t})=>{try{return e.id===t.userId&&!1===t.approved}catch(e){return console.error(e),!1}})),f.addPermission(new n.Action(r,y,({accessor:e,target:t})=>{try{return!(!e.clientId||e.clientId!==t.user.clientId)}catch(e){return console.error(e),!1}})),f.addPermission(new n.Action(r,w,({accessor:e,target:t})=>{try{return!(!e.clientId||e.clientId!==t.clientId)}catch(e){return console.error(e),!1}})),f.addPermission(new n.Action(r,g,({accessor:e,target:t})=>{try{return!(!e.clientId||e.clientId!==t.clientId)}catch(e){return console.error(e),!1}})),f.addPermission(new n.Action(r,v,({accessor:e,target:t})=>{try{return!(!e.clientId||e.clientId!==t.clientId)}catch(e){return console.error(e),!1}})),f.addPermission(new n.Action(r,m,({accessor:e,target:t})=>{try{return!(!e.clientId||!t.clients.find(t=>t.id===e.clientId))}catch(e){return console.error(e),!1}})),f.addPermission(new n.Action(r,R,({accessor:e,target:t})=>{try{return!(!e.clientId||e.clientId!==t.clientId)}catch(e){return console.error(e),!1}})),f.addPermission(new n.Action(s,g,({accessor:e,target:t})=>{try{return!(!e.clientId||e.clientId!==t.clientId)}catch(e){return console.error(e),!1}},["categories","objectId","plateNumber","vin","wialonUnitId"])),f.addPermission(new n.Action(s,y,({accessor:e,target:t})=>{try{return!(!e.clientId||e.clientId!==t.user.clientId)}catch(e){return console.error(e),!1}})),f.addPermission(new n.Action(s,v,({accessor:e,target:t})=>{try{return!(!e.clientId||e.clientId!==t.clientId)}catch(e){return console.error(e),!1}})),f.addPermission(new n.Action(l,v,({accessor:e,target:t})=>{try{return!(!e.clientId||e.clientId!==t.clientId||!1!==t.approved)}catch(e){return console.error(e),!1}})),p.addPermission(new n.Action(c,w,({accessor:e,target:t})=>{try{return!(!e.clientId||e.clientId!==t.clientId)}catch(e){return console.error(e),!1}})),p.addPermission(new n.Action(c,R,({accessor:e,target:t})=>{try{return!(!e.clientId||e.clientId!==t.clientId)}catch(e){return console.error(e),!1}})),p.addPermission(new n.Action(r,y,({accessor:e,target:t})=>{try{return!(!e.clientId||e.clientId!==t.user.clientId)}catch(e){return console.error(e),!1}})),p.addPermission(new n.Action(s,y,({accessor:e,target:t})=>{try{return!(!e.clientId||e.clientId!==t.user.clientId)}catch(e){return console.error(e),!1}})),p.addPermission(new n.Action(r,m,({accessor:e,target:t})=>{try{return!(!e.clientId||!t.clients.find(t=>t.id===e.clientId))}catch(e){return console.error(e),!1}})),p.addPermission(new n.Action(r,w,({accessor:e,target:t})=>{try{return!(!e.clientId||e.clientId!==t.clientId)}catch(e){return console.error(e),!1}})),p.addPermission(new n.Action(r,g,({accessor:e,target:t})=>{try{return!(!e.clientId||e.clientId!==t.clientId)}catch(e){return console.error(e),!1}})),p.addPermission(new n.Action(r,v,({accessor:e,target:t})=>{try{return!(!e.clientId||e.clientId!==t.clientId)}catch(e){return console.error(e),!1}})),p.addPermission(new n.Action(r,R,({accessor:e,target:t})=>{try{return!(!e.clientId||e.clientId!==t.clientId)}catch(e){return console.error(e),!1}})),p.addPermission(new n.Action(s,w,({accessor:e,target:t})=>{try{return!(!e.clientId||e.clientId!==t.clientId)}catch(e){return console.error(e),!1}})),p.addPermission(new n.Action(s,g,({accessor:e,target:t})=>{try{return!(!e.clientId||e.clientId!==t.clientId)}catch(e){return console.error(e),!1}},["objectId","plateNumber","vin","wialonUnitId"])),p.addPermission(new n.Action(s,v,({accessor:e,target:t})=>{try{return!(!e.clientId||e.clientId!==t.clientId)}catch(e){return console.error(e),!1}})),p.addPermission(new n.Action(s,R,({accessor:e,target:t})=>{try{return!(!e.clientId||e.clientId!==t.clientId)}catch(e){return console.error(e),!1}})),p.addPermission(new n.Action(l,R,({accessor:e,target:t})=>{try{return!(!e.clientId||e.clientId!==t.clientId)}catch(e){return console.error(e),!1}})),p.addPermission(new n.Action(l,y,({accessor:e,target:t})=>{try{return!(!e.clientId||e.clientId!==t.user.clientId||!1!==t.approved)}catch(e){return console.error(e),!1}})),u.addPermission(new n.Action(c,w)),u.addPermission(new n.Action(c,g)),u.addPermission(new n.Action(c,b)),u.addPermission(new n.Action(c,m)),u.addPermission(new n.Action(c,R)),u.addPermission(new n.Action(r,w)),u.addPermission(new n.Action(r,g)),u.addPermission(new n.Action(r,y)),u.addPermission(new n.Action(r,b)),u.addPermission(new n.Action(r,v)),u.addPermission(new n.Action(r,m)),u.addPermission(new n.Action(r,R)),u.addPermission(new n.Action(s,w)),u.addPermission(new n.Action(s,g)),u.addPermission(new n.Action(s,y)),u.addPermission(new n.Action(s,b)),u.addPermission(new n.Action(s,v)),u.addPermission(new n.Action(s,m)),u.addPermission(new n.Action(s,R)),u.addPermission(new n.Action(l,w)),u.addPermission(new n.Action(l,g)),u.addPermission(new n.Action(l,y,({accessor:e,target:t})=>{try{return!1===t.approved}catch(e){return console.error(e),!1}})),u.addPermission(new n.Action(l,b)),u.addPermission(new n.Action(l,v)),u.addPermission(new n.Action(l,m)),u.addPermission(new n.Action(l,R)),d.addRole(u),d.addRole(p),d.addRole(f),d.addRole(h),t.default=d,t.roles={admin:p,keyManager:f,guest:h,master:u},t.resources={bookings:y,vehicles:g,locations:m,users:w,accidents:v,categories:R,clients:b}},function(e,t,o){"use strict";function i(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}Object.defineProperty(t,"__esModule",{value:!0}),i(o(86)),i(o(92)),i(o(45)),function(e){e.CREATE="CREATE",e.DELETE="DELETE",e.UPDATE="UPDATE",e.READ="READ"}(t.API_OPERATION||(t.API_OPERATION={}))},function(e,t,o){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=i(o(8));t.default=class{constructor(e,t,o){this.db=e,this.user=t,this.resource=o,this.getUserPermissions=async(e,t)=>this.user&&this.resource?{access:await n.default.can(this.user.role,e,this.resource,t),excludedFields:n.default.getExcludedFields(this.user.role,e,this.resource)}:{access:!1,excludedFields:[]}}createVehicle(e){return this.db.Vehicle.create(e)}getVehicles(e){return this.db.Vehicle.findAll({...e,include:[{all:!0}]})}getVehicle(e,t){return this.db.Vehicle.findByPk(e,{...t,include:[{all:!0}]})}createUser(e){return this.db.User.create(e)}getUsers(e){return this.db.User.findAll({...e,include:[{all:!0}]})}getUser(e,t){return this.db.User.findByPk(e,{...t,include:[{all:!0}]})}createLocation(e){return this.db.Location.create(e)}getLocations(e){return this.db.Location.findAll({...e,include:[{all:!0}]})}getLocation(e,t){return this.db.Location.findByPk(e,{...t,include:[{all:!0}]})}createBooking(e){return this.db.Booking.create(e)}getBookings(e){return this.db.Booking.findAll({...e,include:[{all:!0}]})}getBooking(e,t){return this.db.Booking.findByPk(e,{...t,include:[{all:!0}]})}createAccident(e){return this.db.Accident.create(e)}getAccidents(e){return this.db.Accident.findAll({...e,include:[{all:!0}]})}getAccident(e,t){return this.db.Accident.findByPk(e,{...t,include:[{all:!0}]})}createClient(e){return this.db.Client.create(e)}getClients(e){return this.db.Client.findAll({...e,include:[{all:!0}]})}getClient(e,t){return this.db.Client.findByPk(e,{...t,include:[{all:!0}]})}createCategory(e){return this.db.Category.create(e)}getCategorys(e){return this.db.Category.findAll({...e,include:[{all:!0}]})}getCategory(e,t){return this.db.Category.findByPk(e,{...t,include:[{all:!0}]})}}},function(e,t){e.exports=require("bcryptjs")},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const{DATABASE_NAME:i,DATABASE_USERNAME:n,DATABASE_PASSWORD:a,DATABASE_HOST:r,DATABASE_PORT:s,MAIL_USER:l,MAIL_PASS:c,MAIL_PORT:d,MAIL_HOST:u,SERVER_PORT:p,SERVER_URL:f,SECRET_KEY:h}=process.env;t.default={database:{name:i,username:n,password:a,host:r,port:s,sequelize:{dialect:"mysql",pool:{max:5,min:0,acquire:3e4,idle:1e4}}},mail:{auth:{user:l,pass:c},port:d,secure:!0,host:u},serverPort:p,serverUrl:f,secretKey:h}},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=o(77);t.User=i.default;var n=o(79);t.Booking=n.default;var a=o(80);t.Vehicle=a.default;var r=o(81);t.Location=r.default;var s=o(82);t.Client=s.default;var l=o(83);t.Accident=l.default},function(e,t){e.exports=require("node-wialon")},function(e,t){e.exports=require("sequelize")},function(e,t){e.exports=require("path")},function(e,t){e.exports=require("moment")},function(e,t,o){"use strict";(function(e){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=i(o(26)),a=i(o(16)),r=o(71),s=i(o(72)),l=i(o(73)),c=i(o(28)),d=i(o(30)),u=i(o(74)),p=i(o(12)),f=o(1),{mail:h,secretKey:g}=p.default,m=t=>n.default.readFileSync(a.default.resolve(`${e}/templates/${t}.mjml`),"utf8"),y=()=>l.default.createTransport({auth:h.auth,port:Number(h.port),secure:h.secure,host:h.host}),w=(e,t)=>r.compile(e)(t),v=(e,t)=>d.default(e,"X").tz(t).format("LLL");t.sendPasswordResetToken=({email:e,url:t})=>{let o=c.default.sign({email:e,passwordReset:!0},g,{expiresIn:"1h"});return y().sendMail({from:"no-reply@atsuae.net",to:e,subject:"Password Reset",html:`<h1>Hello</h1><a href="${t}?token=${o}">Click here to reset password!</a>`})},t.sendInvite=({email:e,clientId:t})=>{const o=y();let i=c.default.sign({email:e,clientId:t},g,{expiresIn:"7d"});const n=w(m("invite"),{company:"LeasePlan",contactEmail:"support@atsuae.net",logoSrc:`${process.env.SERVER_URL}/static/images/mail-header.png`,signUpLink:`${process.env.CLIENT_URL}/signup?token=${i}`}),a={from:"LeasePlan Rentals <no-reply@atsuae.net>",to:e,subject:"You are invited to LeasePlan Car Booking!",html:s.default(n).html};return new Promise((e,t)=>{o.sendMail(a,(function(o,i){o?t(o):e(i.response)}))})},t.sendInvoice=({email:e,amount:t,customerName:o,vehicleName:i,from:n,to:a,bookingId:r,timeZone:l})=>{const c=y(),d=w(m("invoice"),{company:"LeasePlan",customerName:o,vehicleName:i,from:v(n,l),to:v(a,l),contactEmail:"support@atsuae.net",logoSrc:`${process.env.SERVER_URL}/static/images/mail-header.png`,amount:t,bookingId:r}),u={from:"LeasePlan Rentals <no-reply@atsuae.net>",to:e,subject:"Your car booking receipt is here!",html:s.default(d).html};return new Promise((e,t)=>{c.sendMail(u,(function(o,i){o?t(o):e(i.response)}))})},t.sendBookingNotification=async({email:t,customerEmail:o,customerName:i,mobile:r,bookingId:l,from:c,to:d,vehicleId:p,vehicle:h,plateNumber:g,location:R,lat:b,lng:E,company:I,timeZone:A})=>{const _=y(),S=new u.default({width:1200,height:800,tileUrl:"https://maps.wikimedia.org/osm-intl/{z}/{x}/{y}.png?lang=en"});S.addMarker({img:a.default.join(e,"../../public/images/LocationMarker.png"),coord:[E,b],offsetX:50,offsetY:100,width:100,height:100}),await S.render([E,b],10);const P=a.default.join(f.getStaticFilesPath(),"/maps"),C=`${Date.now()}.png`,N=a.default.join(P,C);await f.makeDirectoryIfNotExist(P),await S.image.save(N);const O=w(m("bookingNotification"),{customerEmail:o,customerName:i,mobile:r,bookingId:l,from:v(c,A),to:v(d,A),vehicleId:p,vehicle:h,plateNumber:g,location:R,lat:b,lng:E,company:I,mapURL:`cid:${C}`,logoSrc:`${process.env.SERVER_URL}/static/images/mail-header.png`}),D=s.default(O);return new Promise((e,o)=>{_.sendMail({from:"LeasePlan Rentals <no-reply@atsuae.net>",to:t,subject:`Booking request on ${h}`,html:D.html,attachments:[{filename:"Map Location.png",path:N,cid:C}]},(function(t,i){return n.default.promises.unlink(N),t?o(t):e(i.response)}))})},t.sendBookingConfirmation=async({email:t,customerName:o,vehicleName:i,from:r,to:l,bookingId:c,parkingLocation:d,lat:p,lng:h,address:g,timeZone:R})=>{const b=y(),E=new u.default({width:1200,height:800,tileUrl:"https://maps.wikimedia.org/osm-intl/{z}/{x}/{y}.png?lang=en"});E.addMarker({img:a.default.join(e,"../../public/images/LocationMarker.png"),coord:[h,p],offsetX:50,offsetY:100,width:100,height:100}),await E.render([h,p],10);const I=a.default.join(f.getStaticFilesPath(),"/maps"),A=`${Date.now()}.png`,_=a.default.join(I,A);await f.makeDirectoryIfNotExist(I),await E.image.save(_);const S=w(m("confirmBooking"),{company:"LeasePlan",contactEmail:"support@atsuae.net",logoSrc:`${process.env.SERVER_URL}/static/images/mail-header.png`,bookingId:c,from:v(r,R),to:v(l,R),vehicleName:i,customerName:o,mapURL:`cid:${A}`,lat:p,lng:h,parkingLocation:d,address:g}),P={from:"LeasePlan Rentals <no-reply@atsuae.net>",to:t,subject:"Your booking has been confirmed!",html:s.default(S).html,attachments:[{filename:"Map Location.png",path:_,cid:A}]};return new Promise((e,t)=>{b.sendMail(P,(function(o,i){return n.default.promises.unlink(_),o?t(o):e(i.response)}))})}}).call(this,"src\\server\\utils\\mail")},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=o(1);t.addReplacedFiles=(e,{url:t,model:o,field:i})=>{e.locals.replacedFiles?e.locals.replacedFiles.push({url:t,model:o,field:i}):e.locals.replacedFiles=[{url:t,model:o,field:i}]},t.deleteReplacedFiles=async(e,{locals:t},o)=>{if(t.replacedFiles)for(let e of t.replacedFiles)e.url&&e.model&&e.field&&e.model.findAll({where:{[e.field]:e.url}}).then(t=>{t.length||i.deleteFileFromUrl(e.url)});o()},t.default=t.deleteReplacedFiles},function(e,t,o){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=i(o(26)),a=o(1);t.default=async({file:e,files:t},o,i)=>{if(o.statusCode>=400&&(e&&(e.url?a.deleteFileFromUrl(e.url):e.path&&n.default.promises.unlink(e.path)),t))for(const e in Object.keys(t)){const o=t[e];o.url?a.deleteFileFromUrl(o.url):o.path&&n.default.promises.unlink(o.path)}i()}},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=o(2),n=o(1);t.default=(e,t,o)=>{if(e.user.role!==i.Role.GUEST)o();else{let e=new n.ResponseBuilder;e.setCode(401),e.setMessage("You are not authorized as a guest."),t.status(401),t.json(e)}}},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=({body:e},t,o)=>{for(let t in e)try{e[t]=JSON.parse(e[t])}catch(e){}o()}},function(e,t,o){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=i(o(16)),a=i(o(76)),r=o(1);t.default=(e,t)=>a.default({storage:a.default.diskStorage({destination:function(t,o,i){const a=n.default.join(r.getStaticFilesPath(),e);r.makeDirectoryIfNotExist(a).then(()=>i(null,a)).catch(e=>i(e,a))},filename:function(e,t,o){console.log(t),o(null,`${Date.now()}-${t.originalname}`)}}),limits:{fileSize:1e7,...t&&t.limits}})},function(e,t,o){"use strict";function i(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}Object.defineProperty(t,"__esModule",{value:!0});const n=o(9);i(o(87)),i(o(89));t.Validator=class{constructor(e,t,o,i){this.schema=e,this.user=t,this.operation=o,this.target=i,this.cast=e=>{const{user:t,operation:o,schema:i,target:n}=this;return i.cast(e,{stripUnknown:!0,context:{user:t,operation:o,target:n,data:e,casting:!0}})},this.validate=e=>{const{user:t,operation:o,schema:i,target:n}=this;return i.validate(e,{abortEarly:!1,context:{user:t,operation:o,target:n,data:e,casting:!1}})}}};t.DataCaster=class{constructor(e,t){this.schema=e,this.user=t,this.cast=e=>this.schema.cast(e,{context:{operation:n.API_OPERATION.READ,user:this.user}})}}},function(e,t){e.exports=require("yup")},function(e,t){e.exports=require("fs")},function(e,t){e.exports=require("lodash")},function(e,t){e.exports=require("jsonwebtoken")},function(e,t){e.exports=require("passport")},function(e,t){e.exports=require("moment-timezone")},function(e,t,o){"use strict";var i=this&&this.__decorate||function(e,t,o,i){var n,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,o):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,o,i);else for(var s=e.length-1;s>=0;s--)(n=e[s])&&(r=(a<3?n(r):a>3?n(t,o,r):n(t,o))||r);return a>3&&r&&Object.defineProperty(t,o,r),r},n=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});const a=o(3),r=o(0);let s=class extends a.Model{};i([a.PrimaryKey,a.AutoIncrement,a.Column,n("design:type",Number)],s.prototype,"id",void 0),i([a.Column({type:a.DataType.STRING(500),allowNull:!1,validate:{notNull:{msg:"Message is required."}}}),n("design:type",String)],s.prototype,"message",void 0),i([a.Column,n("design:type",String)],s.prototype,"accidentImageSrc",void 0),i([a.Column,n("design:type",String)],s.prototype,"accidentVideoSrc",void 0),i([a.Column,n("design:type",Number)],s.prototype,"lat",void 0),i([a.Column,n("design:type",Number)],s.prototype,"lng",void 0),i([a.ForeignKey(()=>r.User),a.Column({allowNull:!1}),n("design:type",Number)],s.prototype,"userId",void 0),i([a.BelongsTo(()=>r.User),n("design:type",r.User)],s.prototype,"user",void 0),i([a.ForeignKey(()=>r.Vehicle),a.Column({allowNull:!1}),n("design:type",Number)],s.prototype,"vehicleId",void 0),i([a.BelongsTo(()=>r.Vehicle),n("design:type",r.Vehicle)],s.prototype,"vehicle",void 0),i([a.ForeignKey(()=>r.Booking),a.Column({allowNull:!1}),n("design:type",Number)],s.prototype,"bookingId",void 0),i([a.BelongsTo(()=>r.Booking),n("design:type",r.Booking)],s.prototype,"booking",void 0),i([a.CreatedAt,n("design:type",Date)],s.prototype,"createdAt",void 0),i([a.UpdatedAt,n("design:type",Date)],s.prototype,"updatedAt",void 0),i([a.BelongsToMany(()=>r.User,()=>r.AccidentUserStatus,"accidentId"),n("design:type",Array)],s.prototype,"userStatuses",void 0),s=i([a.Table],s),t.Accident=s},function(e,t,o){"use strict";var i=this&&this.__decorate||function(e,t,o,i){var n,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,o):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,o,i);else for(var s=e.length-1;s>=0;s--)(n=e[s])&&(r=(a<3?n(r):a>3?n(t,o,r):n(t,o))||r);return a>3&&r&&Object.defineProperty(t,o,r),r},n=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});const a=o(3),r=o(0);let s=class extends a.Model{};i([a.Column({defaultValue:!1,allowNull:!1}),n("design:type",Boolean)],s.prototype,"read",void 0),i([a.Column({defaultValue:!1,allowNull:!1}),n("design:type",Boolean)],s.prototype,"deleted",void 0),i([a.ForeignKey(()=>r.Accident),a.Column({allowNull:!1}),n("design:type",Number)],s.prototype,"accidentId",void 0),i([a.BelongsTo(()=>r.Accident),n("design:type",r.Accident)],s.prototype,"accident",void 0),i([a.ForeignKey(()=>r.User),a.Column({allowNull:!1}),n("design:type",Number)],s.prototype,"userId",void 0),i([a.BelongsTo(()=>r.User),n("design:type",r.User)],s.prototype,"user",void 0),i([a.CreatedAt,n("design:type",Date)],s.prototype,"createdAt",void 0),i([a.UpdatedAt,n("design:type",Date)],s.prototype,"updatedAt",void 0),s=i([a.Table],s),t.AccidentUserStatus=s},function(e,t,o){"use strict";var i=this&&this.__decorate||function(e,t,o,i){var n,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,o):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,o,i);else for(var s=e.length-1;s>=0;s--)(n=e[s])&&(r=(a<3?n(r):a>3?n(t,o,r):n(t,o))||r);return a>3&&r&&Object.defineProperty(t,o,r),r},n=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});const a=o(3),r=o(0);o(2);let s=class extends a.Model{};i([a.PrimaryKey,a.AutoIncrement,a.Column,n("design:type",Number)],s.prototype,"id",void 0),i([a.Column({defaultValue:!1,allowNull:!1}),n("design:type",Boolean)],s.prototype,"paid",void 0),i([a.Column({defaultValue:null}),n("design:type",Number)],s.prototype,"amount",void 0),i([a.Column({allowNull:!1,type:a.DataType.DATE}),n("design:type",Date)],s.prototype,"from",void 0),i([a.Column({allowNull:!1,type:a.DataType.DATE}),n("design:type",Date)],s.prototype,"to",void 0),i([a.Column({defaultValue:null}),n("design:type",Boolean)],s.prototype,"approved",void 0),i([a.Column({defaultValue:!1,allowNull:!1}),n("design:type",Boolean)],s.prototype,"finished",void 0),i([a.Column(a.DataType.FLOAT),n("design:type",Number)],s.prototype,"startMileage",void 0),i([a.Column(a.DataType.FLOAT),n("design:type",Number)],s.prototype,"endMileage",void 0),i([a.Column(a.DataType.FLOAT),n("design:type",Number)],s.prototype,"startFuel",void 0),i([a.Column(a.DataType.FLOAT),n("design:type",Number)],s.prototype,"endFuel",void 0),i([a.ForeignKey(()=>r.User),a.Column({allowNull:!1}),n("design:type",Number)],s.prototype,"userId",void 0),i([a.ForeignKey(()=>r.Vehicle),a.Column({allowNull:!1}),n("design:type",Number)],s.prototype,"vehicleId",void 0),i([a.Column({allowNull:!1,type:a.DataType.STRING}),n("design:type",String)],s.prototype,"bookingType",void 0),i([a.ForeignKey(()=>r.ReplaceVehicle),a.Column,n("design:type",Number)],s.prototype,"replaceVehicleId",void 0),i([a.CreatedAt,n("design:type",Number)],s.prototype,"createdAt",void 0),i([a.UpdatedAt,n("design:type",Number)],s.prototype,"updatedAt",void 0),i([a.BelongsTo(()=>r.User),n("design:type",r.User)],s.prototype,"user",void 0),i([a.BelongsTo(()=>r.Vehicle),n("design:type",r.Vehicle)],s.prototype,"vehicle",void 0),i([a.BelongsTo(()=>r.ReplaceVehicle),n("design:type",r.ReplaceVehicle)],s.prototype,"replaceVehicle",void 0),s=i([a.Table],s),t.Booking=s},function(e,t,o){"use strict";var i=this&&this.__decorate||function(e,t,o,i){var n,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,o):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,o,i);else for(var s=e.length-1;s>=0;s--)(n=e[s])&&(r=(a<3?n(r):a>3?n(t,o,r):n(t,o))||r);return a>3&&r&&Object.defineProperty(t,o,r),r},n=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});const a=o(3),r=o(0);let s=class extends a.Model{};i([a.PrimaryKey,a.AutoIncrement,a.Column,n("design:type",Number)],s.prototype,"id",void 0),i([a.Column({allowNull:!1}),n("design:type",String)],s.prototype,"name",void 0),i([a.ForeignKey(()=>r.Client),a.Column({allowNull:!1}),n("design:type",Number)],s.prototype,"clientId",void 0),i([a.CreatedAt,n("design:type",Date)],s.prototype,"createdAt",void 0),i([a.CreatedAt,n("design:type",Date)],s.prototype,"updatedAt",void 0),i([a.BelongsTo(()=>r.Client),n("design:type",r.Client)],s.prototype,"client",void 0),i([a.BelongsToMany(()=>r.Vehicle,()=>r.VehicleCategory),n("design:type",Array)],s.prototype,"vehicles",void 0),s=i([a.Table],s),t.Category=s},function(e,t,o){"use strict";var i=this&&this.__decorate||function(e,t,o,i){var n,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,o):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,o,i);else for(var s=e.length-1;s>=0;s--)(n=e[s])&&(r=(a<3?n(r):a>3?n(t,o,r):n(t,o))||r);return a>3&&r&&Object.defineProperty(t,o,r),r},n=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});const a=o(3),r=o(0);let s=class extends a.Model{};i([a.PrimaryKey,a.AutoIncrement,a.Column,n("design:type",Number)],s.prototype,"id",void 0),i([a.Column({allowNull:!1}),n("design:type",String)],s.prototype,"name",void 0),i([a.CreatedAt,n("design:type",Date)],s.prototype,"createdAt",void 0),i([a.UpdatedAt,n("design:type",Date)],s.prototype,"updatedAt",void 0),i([a.HasMany(()=>r.User),n("design:type",Array)],s.prototype,"users",void 0),i([a.HasMany(()=>r.Vehicle),n("design:type",Array)],s.prototype,"vehicles",void 0),i([a.HasMany(()=>r.Category),n("design:type",Array)],s.prototype,"categories",void 0),i([a.BelongsToMany(()=>r.Location,()=>r.ClientLocation),n("design:type",Array)],s.prototype,"locations",void 0),s=i([a.Table],s),t.Client=s},function(e,t,o){"use strict";var i=this&&this.__decorate||function(e,t,o,i){var n,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,o):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,o,i);else for(var s=e.length-1;s>=0;s--)(n=e[s])&&(r=(a<3?n(r):a>3?n(t,o,r):n(t,o))||r);return a>3&&r&&Object.defineProperty(t,o,r),r},n=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});const a=o(3),r=o(0);let s=class extends a.Model{};i([a.ForeignKey(()=>r.Client),a.Column({allowNull:!1}),n("design:type",Number)],s.prototype,"clientId",void 0),i([a.BelongsTo(()=>r.Client),n("design:type",r.Client)],s.prototype,"client",void 0),i([a.ForeignKey(()=>r.Location),a.Column({allowNull:!1}),n("design:type",Number)],s.prototype,"locationId",void 0),i([a.BelongsTo(()=>r.Location),n("design:type",r.Location)],s.prototype,"location",void 0),i([a.CreatedAt,n("design:type",Date)],s.prototype,"createdAt",void 0),i([a.UpdatedAt,n("design:type",Date)],s.prototype,"updatedAt",void 0),s=i([a.Table],s),t.ClientLocation=s},function(e,t,o){"use strict";var i=this&&this.__decorate||function(e,t,o,i){var n,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,o):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,o,i);else for(var s=e.length-1;s>=0;s--)(n=e[s])&&(r=(a<3?n(r):a>3?n(t,o,r):n(t,o))||r);return a>3&&r&&Object.defineProperty(t,o,r),r},n=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});const a=o(3),r=o(0);let s=class extends a.Model{};i([a.PrimaryKey,a.AutoIncrement,a.Column,n("design:type",Number)],s.prototype,"id",void 0),i([a.Column({allowNull:!1}),n("design:type",String)],s.prototype,"name",void 0),i([a.Column({allowNull:!1}),n("design:type",Number)],s.prototype,"lat",void 0),i([a.Column({allowNull:!1}),n("design:type",Number)],s.prototype,"lng",void 0),i([a.Column({allowNull:!1}),n("design:type",String)],s.prototype,"address",void 0),i([a.Column,n("design:type",String)],s.prototype,"locationImageSrc",void 0),i([a.CreatedAt,n("design:type",Date)],s.prototype,"createdAt",void 0),i([a.UpdatedAt,n("design:type",Date)],s.prototype,"updatedAt",void 0),i([a.BelongsToMany(()=>r.Client,()=>r.ClientLocation),n("design:type",Array)],s.prototype,"clients",void 0),i([a.HasMany(()=>r.Vehicle),n("design:type",Array)],s.prototype,"vehicles",void 0),s=i([a.Table],s),t.Location=s},function(e,t,o){"use strict";var i=this&&this.__decorate||function(e,t,o,i){var n,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,o):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,o,i);else for(var s=e.length-1;s>=0;s--)(n=e[s])&&(r=(a<3?n(r):a>3?n(t,o,r):n(t,o))||r);return a>3&&r&&Object.defineProperty(t,o,r),r},n=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});const a=o(3),r=o(0);let s=class extends a.Model{};i([a.PrimaryKey,a.AutoIncrement,a.Column,n("design:type",Number)],s.prototype,"id",void 0),i([a.Column,n("design:type",String)],s.prototype,"plateNumber",void 0),i([a.Column,n("design:type",String)],s.prototype,"brand",void 0),i([a.Column,n("design:type",String)],s.prototype,"model",void 0),i([a.Column,n("design:type",String)],s.prototype,"vin",void 0),i([a.CreatedAt,n("design:type",Date)],s.prototype,"createdAt",void 0),i([a.UpdatedAt,n("design:type",Date)],s.prototype,"updatedAt",void 0),i([a.HasOne(()=>r.Booking),n("design:type",r.Booking)],s.prototype,"booking",void 0),s=i([a.Table],s),t.ReplaceVehicle=s},function(e,t,o){"use strict";var i,n=this&&this.__decorate||function(e,t,o,i){var n,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,o):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,o,i);else for(var s=e.length-1;s>=0;s--)(n=e[s])&&(r=(a<3?n(r):a>3?n(t,o,r):n(t,o))||r);return a>3&&r&&Object.defineProperty(t,o,r),r},a=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});const r=o(3),s=o(0);o(2);let l=i=class extends r.Model{};n([r.PrimaryKey,r.AutoIncrement,r.Column,a("design:type",Number)],l.prototype,"id",void 0),n([r.Column({allowNull:!1,unique:{name:"email",msg:"Email address already in use."}}),a("design:type",String)],l.prototype,"username",void 0),n([r.Column({allowNull:!1}),a("design:type",String)],l.prototype,"firstName",void 0),n([r.Column({allowNull:!1}),a("design:type",String)],l.prototype,"lastName",void 0),n([r.Column({allowNull:!1,unique:{name:"email",msg:"Email address already in use."}}),a("design:type",String)],l.prototype,"email",void 0),n([r.Column({allowNull:!1}),a("design:type",String)],l.prototype,"password",void 0),n([r.Column({allowNull:!1,unique:{name:"email",msg:"Email address already in use."}}),a("design:type",String)],l.prototype,"mobileNumber",void 0),n([r.Column,a("design:type",String)],l.prototype,"contractNo",void 0),n([r.Column,a("design:type",String)],l.prototype,"objectNo",void 0),n([r.Column,a("design:type",String)],l.prototype,"lastLogin",void 0),n([r.Column,a("design:type",String)],l.prototype,"userImageSrc",void 0),n([r.Column,a("design:type",String)],l.prototype,"licenseImageSrc",void 0),n([r.Column({allowNull:!1,defaultValue:!1}),a("design:type",Boolean)],l.prototype,"blocked",void 0),n([r.Column({allowNull:!1,defaultValue:!1}),a("design:type",Boolean)],l.prototype,"emailConfirmed",void 0),n([r.ForeignKey(()=>s.Client),r.Column,a("design:type",Number)],l.prototype,"clientId",void 0),n([r.Column({type:r.DataType.STRING,allowNull:!1}),a("design:type",String)],l.prototype,"role",void 0),n([r.Column({type:r.DataType.STRING,allowNull:!1}),a("design:type",String)],l.prototype,"timeZone",void 0),n([r.ForeignKey(()=>i),r.Column,a("design:type",Number)],l.prototype,"userCreatorId",void 0),n([r.CreatedAt,a("design:type",Date)],l.prototype,"createdAt",void 0),n([r.UpdatedAt,a("design:type",Date)],l.prototype,"updatedAt",void 0),n([r.BelongsTo(()=>s.Client),a("design:type",s.Client)],l.prototype,"client",void 0),n([r.BelongsTo(()=>i,"userCreatorId"),a("design:type",l)],l.prototype,"userCreator",void 0),n([r.BelongsToMany(()=>s.Accident,()=>s.AccidentUserStatus),a("design:type",Array)],l.prototype,"accidentStatuses",void 0),n([r.BelongsToMany(()=>s.Category,()=>s.UserVehicleCategory),a("design:type",Array)],l.prototype,"categories",void 0),n([r.HasMany(()=>s.Booking),a("design:type",Array)],l.prototype,"bookings",void 0),l=i=n([r.Table],l),t.User=l},function(e,t,o){"use strict";var i=this&&this.__decorate||function(e,t,o,i){var n,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,o):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,o,i);else for(var s=e.length-1;s>=0;s--)(n=e[s])&&(r=(a<3?n(r):a>3?n(t,o,r):n(t,o))||r);return a>3&&r&&Object.defineProperty(t,o,r),r},n=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});const a=o(3),r=o(0);let s=class extends a.Model{};i([a.ForeignKey(()=>r.User),a.Column({allowNull:!1}),n("design:type",Number)],s.prototype,"userId",void 0),i([a.BelongsTo(()=>r.User),n("design:type",r.User)],s.prototype,"user",void 0),i([a.ForeignKey(()=>r.Category),a.Column({allowNull:!1}),n("design:type",Number)],s.prototype,"categoryId",void 0),i([a.BelongsTo(()=>r.Category),n("design:type",r.Category)],s.prototype,"category",void 0),i([a.CreatedAt,n("design:type",Date)],s.prototype,"createdAt",void 0),i([a.UpdatedAt,n("design:type",Date)],s.prototype,"updatedAt",void 0),s=i([a.Table],s),t.UserVehicleCategory=s},function(e,t,o){"use strict";var i=this&&this.__decorate||function(e,t,o,i){var n,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,o):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,o,i);else for(var s=e.length-1;s>=0;s--)(n=e[s])&&(r=(a<3?n(r):a>3?n(t,o,r):n(t,o))||r);return a>3&&r&&Object.defineProperty(t,o,r),r},n=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});const a=o(3),r=o(0);o(2);let s=class extends a.Model{};i([a.PrimaryKey,a.AutoIncrement,a.Column,n("design:type",Number)],s.prototype,"id",void 0),i([a.Column({allowNull:!1}),n("design:type",String)],s.prototype,"brand",void 0),i([a.Column({allowNull:!1}),n("design:type",String)],s.prototype,"model",void 0),i([a.Column({allowNull:!1}),n("design:type",String)],s.prototype,"plateNumber",void 0),i([a.Column({allowNull:!1}),n("design:type",String)],s.prototype,"vin",void 0),i([a.Column({allowNull:!1,defaultValue:!1}),n("design:type",Boolean)],s.prototype,"defleeted",void 0),i([a.Column,n("design:type",String)],s.prototype,"parkingLocation",void 0),i([a.Column,n("design:type",String)],s.prototype,"vehicleImageSrc",void 0),i([a.Column({allowNull:!1,defaultValue:0}),n("design:type",Number)],s.prototype,"bookingChargeCount",void 0),i([a.Column({allowNull:!1,defaultValue:0}),n("design:type",Number)],s.prototype,"bookingCharge",void 0),i([a.Column,n("design:type",Number)],s.prototype,"wialonUnitId",void 0),i([a.Column({type:a.DataType.STRING}),n("design:type",String)],s.prototype,"bookingChargeUnit",void 0),i([a.ForeignKey(()=>r.Client),a.Column,n("design:type",Number)],s.prototype,"clientId",void 0),i([a.ForeignKey(()=>r.Location),a.Column,n("design:type",Number)],s.prototype,"locationId",void 0),i([a.CreatedAt,n("design:type",Date)],s.prototype,"createdAt",void 0),i([a.UpdatedAt,n("design:type",Date)],s.prototype,"updatedAt",void 0),i([a.HasMany(()=>r.Booking),n("design:type",Array)],s.prototype,"bookings",void 0),i([a.HasMany(()=>r.Accident),n("design:type",Array)],s.prototype,"accidents",void 0),i([a.HasMany(()=>r.VehicleIssue),n("design:type",Array)],s.prototype,"vehicleIssues",void 0),i([a.BelongsToMany(()=>r.Category,()=>r.VehicleCategory),n("design:type",Array)],s.prototype,"categories",void 0),i([a.BelongsTo(()=>r.Client),n("design:type",r.Client)],s.prototype,"client",void 0),i([a.BelongsTo(()=>r.Location),n("design:type",r.Location)],s.prototype,"location",void 0),s=i([a.Table],s),t.Vehicle=s},function(e,t,o){"use strict";var i=this&&this.__decorate||function(e,t,o,i){var n,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,o):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,o,i);else for(var s=e.length-1;s>=0;s--)(n=e[s])&&(r=(a<3?n(r):a>3?n(t,o,r):n(t,o))||r);return a>3&&r&&Object.defineProperty(t,o,r),r},n=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});const a=o(3),r=o(0);let s=class extends a.Model{};i([a.ForeignKey(()=>r.Category),a.Column({allowNull:!1}),n("design:type",Number)],s.prototype,"categoryId",void 0),i([a.BelongsTo(()=>r.Category),n("design:type",r.Category)],s.prototype,"category",void 0),i([a.ForeignKey(()=>r.Vehicle),a.Column({allowNull:!1}),n("design:type",Number)],s.prototype,"vehicleId",void 0),i([a.BelongsTo(()=>r.Vehicle),n("design:type",r.Vehicle)],s.prototype,"vehicle",void 0),i([a.CreatedAt,n("design:type",Date)],s.prototype,"createdAt",void 0),i([a.UpdatedAt,n("design:type",Date)],s.prototype,"updatedAt",void 0),s=i([a.Table],s),t.VehicleCategory=s},function(e,t,o){"use strict";var i=this&&this.__decorate||function(e,t,o,i){var n,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,o):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,o,i);else for(var s=e.length-1;s>=0;s--)(n=e[s])&&(r=(a<3?n(r):a>3?n(t,o,r):n(t,o))||r);return a>3&&r&&Object.defineProperty(t,o,r),r},n=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});const a=o(3),r=o(0);let s=class extends a.Model{};i([a.PrimaryKey,a.AutoIncrement,a.Column,n("design:type",Number)],s.prototype,"id",void 0),i([a.Column({allowNull:!1}),n("design:type",String)],s.prototype,"message",void 0),i([a.ForeignKey(()=>r.Vehicle),a.Column({allowNull:!1}),n("design:type",Number)],s.prototype,"vehicleId",void 0),i([a.CreatedAt,n("design:type",Date)],s.prototype,"createdAt",void 0),i([a.UpdatedAt,n("design:type",Date)],s.prototype,"updatedAt",void 0),i([a.BelongsTo(()=>r.Vehicle),n("design:type",r.Vehicle)],s.prototype,"vehicle",void 0),s=i([a.Table],s),t.VehicleIssue=s},function(e,t,o){"use strict";function i(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}Object.defineProperty(t,"__esModule",{value:!0});const n=o(25),a=o(5);i(o(90)),i(o(91)),t.getValidationErrors=e=>e.inner.map(e=>({field:e.path,message:e.message,name:e.name})),t.catchYupVadationErrors=async e=>{let o=[];try{await e()}catch(e){if(e instanceof n.ValidationError&&(o=t.getValidationErrors(e)),o.length)throw new a.FormException("An error has occured in one of the fields.",o)}}},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.Collection=class{constructor(e){this.data=e,this.cast=e=>this.data.map(t=>t.cast(e))}}},function(e,t,o){"use strict";(function(e){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),i(o(47)).default.config();const n=i(o(4)),a=i(o(29)),r=o(48),s=i(o(11)),l=i(o(49)),c=i(o(16)),d=i(o(50)),u=i(o(51)),p=o(1),f=o(2),h=i(o(12)),g=o(0),m=i(o(69)),y=i(o(75)),w=i(o(84)),v=i(o(85)),R=i(o(93)),b=i(o(94)),E=i(o(95)),I=i(o(96)),A=i(o(97)),_=i(o(98)),S=i(o(99)),P=i(o(100)),C=n.default();a.default.use(new r.Strategy(async(e,t,o)=>{try{let i=await g.User.findOne({where:{username:e}});if(i){if(!await s.default.compare(t,i.password)||i.blocked)return o(null,!1);if(i.role!==f.Role.MASTER&&null===i.clientId)throw new Error("Your account does not belong to a client. Please contact customer support.");return o(null,i)}return o(null,!1)}catch(e){return o(e)}})),a.default.serializeUser((function(e,t){t(null,e.id)})),a.default.deserializeUser(async(e,t)=>{try{t(null,await g.User.findByPk(e,{include:[{model:g.Category}],attributes:{exclude:["password"]}}))}catch(e){t(e)}}),C.use(d.default.urlencoded({extended:!0})),C.use(u.default({secret:h.default.secretKey,resave:!1,saveUninitialized:!1})),C.use(n.default.json()),C.use(l.default({origin:process.env.CLIENT_URL,credentials:!0})),C.use(a.default.initialize()),C.use(a.default.session()),C.use("/api/carbooking/auth",m.default),C.use("/api/carbooking/users",y.default),C.use("/api/carbooking/invites",w.default),C.use("/api/carbooking/vehicles",v.default),C.use("/api/carbooking/bookings",R.default),C.use("/api/carbooking/locations",b.default),C.use("/api/carbooking/accidents",E.default),C.use("/api/carbooking/categories",I.default),C.use("/api/carbooking/clients",A.default),C.use("/api/carbooking/issues",_.default),C.use("/api/carbooking/wialon",S.default),C.use("/api/carbooking/reports",P.default),C.use("/static",n.default.static(p.getStaticFilesPath())),C.use("/static",n.default.static(c.default.join(e,"public"))),C.listen(h.default.serverPort,()=>{console.log(`Listening on port ${h.default.serverPort}`)})}).call(this,"src\\server")},function(e,t){e.exports=require("dotenv")},function(e,t){e.exports=require("passport-local")},function(e,t){e.exports=require("cors")},function(e,t){e.exports=require("body-parser")},function(e,t){e.exports=require("express-session")},function(e,t){e.exports=require("url")},function(e,t,o){"use strict";var i;Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.READ="READ",e.UPDATE="UPDATE",e.DELETE="DELETE",e.CREATE="CREATE"}(i||(i={})),t.default=i},function(e,t,o){"use strict";var i;Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.BOOKINGS="BOOKINGS",e.LOCATIONS="LOCATIONS",e.VEHICLES="VEHICLES",e.USERS="USERS",e.ENUMS="ENUMS",e.INVITES="INVITES",e.ACCIDENTS="ACCIDENTS",e.CLIENTS="CLIENTS",e.CATEGORIES="CATEGORIES"}(i||(i={})),t.default=i},function(e,t,o){"use strict";var i;Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.MASTER="MASTER",e.ADMIN="ADMIN",e.KEY_MANAGER="KEY_MANAGER",e.GUEST="GUEST"}(i||(i={})),t.default=i},function(e,t,o){"use strict";var i;Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.PRIVATE="PRIVATE",e.BUSINESS="BUSINESS",e.SERVICE="SERVICE",e.REPLACEMENT="REPLACEMENT"}(i||(i={})),t.default=i},function(e,t,o){"use strict";var i;Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.UNKNOWN="UNKNOWN",e.ONGOING="ONGOING",e.FINISHED="FINISHED",e.APPROVED="APPROVED",e.EXPIRED="EXPIRED",e.DENIED="DENIED",e.PENDING="PENDING"}(i||(i={})),t.default=i},function(e,t,o){"use strict";var i;Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.KILOMETER="Km",e.SECOND="Second",e.HOUR="Hour",e.DAY="Day",e.WEEK="Week",e.MONTH="Month"}(i||(i={})),t.default=i},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=o(7),n=o(5);t.default=class{constructor(e=null,t=!1,o="Unknown server error.",i=[],n=500){this.data=e,this.success=t,this.message=o,this.errors=i,this.code=n}setData(e){this.data=e}setSuccess(e){this.success=e}appendError(e){this.errors.push(e)}setCode(e){this.code=e}setMessage(e){this.message=e}handleError(e,t){console.log(e),e instanceof i.InvalidPermissionException?(this.setCode(422),t.status(422)):e instanceof i.ResourceNotFoundException||e instanceof n.ItemNotFoundException?(this.setCode(404),t.status(404)):e instanceof n.FormException?(e.fields.forEach(e=>this.appendError(e)),t.status(403)):t.status(500),this.setMessage(e.message)}handleSuccess(e,t){this.setMessage(e),this.setCode(200),this.setSuccess(!0),t.status(200)}toObject(){const{message:e,code:t,errors:o,success:i,data:n}=this;return{message:e,code:t,errors:o,success:i,data:n}}}},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class i extends Error{constructor(e="You do not have the permission to access this resource."){super(e)}}t.default=i},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class i extends Error{constructor(e){super(e)}}t.default=i},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class i extends Error{constructor(e,t=[]){super(e),this.fields=t}}t.default=i},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class i extends Error{constructor(e){super(e)}}t.ApiException=i},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=o(5);class n extends i.ApiException{constructor(e,t){super(e),this.fields=t,this.throw=()=>{if(this.fields)throw this}}}t.FormException=n},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=o(5);class n extends i.ApiException{constructor(e){super(e)}}t.DataBaseException=n},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=o(5);class n extends i.ApiException{constructor(e){super(e)}}t.InvalidPermissionException=n},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=o(5);class n extends i.DataBaseException{constructor(e){super(e)}}t.ItemNotFoundException=n},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=o(2);class n{}t.RoleUtils=n,n.roleRanks=[i.Role.MASTER,i.Role.ADMIN,i.Role.KEY_MANAGER,i.Role.GUEST],n.isRoleBetter=(e,t)=>{const o=n.roleRanks.findIndex(t=>t===e),i=n.roleRanks.findIndex(e=>e===t);return o>=0&&i>=0&&i<=o}},function(e,t,o){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=i(o(29)),a=i(o(4)),r=i(o(17)),s=i(o(11)),l=i(o(28)),c=o(70),d=o(1),u=o(18),p=i(o(0)),f=i(o(6)),h=i(o(12)),{secretKey:g}=h.default,m=a.default.Router();m.get("/me",f.default,(function(e,t){let o=new d.ResponseBuilder;o.setData(e.user),o.setMessage("You are logged in."),o.setSuccess(!0),o.setCode(200),t.json(o)})),m.patch("/me",f.default,(async function({user:e,body:t},o){let i=new d.ResponseBuilder,n=e&&await p.default.User.findByPk(e.id);if(n){if(t.password&&t.passwordOld){if(await s.default.compare(t.password,n.password))i.setCode(400),i.setMessage("Old password is same as the new one."),o.status(400);else{let e=await s.default.compare(t.passwordOld,n.password),a=await s.default.hash(t.password,10);e?(await n.update({password:a}),i.setCode(200),i.setMessage("Successfully updated."),i.setSuccess(!0)):(i.setCode(400),i.setMessage("Invalid old password."),o.status(400))}}}else i.setCode(401),i.setMessage("Unauthorized. Are you logged in?"),o.status(401);o.json(i)})),m.post("/login",(function(e,t,o){n.default.authenticate("local",(function(i,n,a){let s=new d.ResponseBuilder;return i?(s.setMessage(i.message),s.setCode(401),t.status(401),t.json(s)):n?void e.logIn(n,(function(e){return p.default.User.findByPk(n.id).then(e=>{e&&e.update({lastLogin:r.default().format("YYYY-MM-DD HH:mm:ss")})}),e?o(e):(s.handleSuccess("Logged in successfully",t),t.json(s.toObject()))})):(s.setMessage("Invalid login details"),s.setCode(401),t.status(401),t.json(s))}))(e,t,o)}),(function(e,t){t.json(e.user)})),m.get("/logout",(function(e,t){let o=new d.ResponseBuilder;o.setCode(200),o.setMessage("Successfully logged out."),o.setSuccess(!0),e.logout(),t.status(200),t.send(o)})),m.post("/forgot",c.oneOf([c.check("email").exists({checkNull:!0}).withMessage("Email cannot be empty").isEmail().withMessage("Invalid email"),[c.check("token").exists({checkNull:!0}).withMessage("You do not have a reset token."),c.check("password").exists({checkNull:!0}).isLength({min:8,max:32}).withMessage("A new password should be provided")]]),(async function(e,t){const o=new d.ResponseBuilder,i=c.validationResult(e);if(!i.isEmpty()){for(let e of i.array())o.appendError(e.msg);return o.setMessage("Invalid fields"),o.setCode(422),t.status(422).json(o)}const{email:n,token:a,password:r}=e.body;if(a)try{const e=l.default.verify(a,g);if(e&&e.passwordReset){const i=await p.default.User.findOne({where:{email:e.email}}),n=await s.default.hash(r,10);return i&&await i.update({password:n}),o.setSuccess(!0),o.setMessage("Password has been reset."),o.setCode(401),t.json(o)}}catch(e){return o.setSuccess(!0),o.setMessage("Invalid token"),o.setCode(422),t.status(401).json(o)}else if(n){if(!await p.default.User.findOne({where:{email:n}}))return o.setMessage("Email is not registered."),o.setCode(404),t.status(404).json(o);u.sendPasswordResetToken({email:n,url:`${process.env.CLIENT_URL}/login/forgot`}).then(()=>(o.setSuccess(!0),o.setMessage("A reset code has been sent."),o.setCode(200),t.json(o))).catch(e=>(console.log(e),o.setMessage("Unknown error."),o.setCode(500),t.status(500).json(o)))}})),t.default=m},function(e,t){e.exports=require("express-validator")},function(e,t){e.exports=require("handlebars")},function(e,t){e.exports=require("mjml")},function(e,t){e.exports=require("nodemailer")},function(e,t){e.exports=require("staticmaps")},function(e,t,o){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=i(o(4)),a=i(o(11)),r=i(o(28)),s=o(19),l=i(o(20)),c=i(o(6)),d=i(o(21)),u=i(o(22)),p=i(o(23)),f=i(o(0)),h=o(1),g=i(o(12)),m=o(13),y=o(7),w=n.default.Router();w.get("/",c.default,async({user:e},t)=>{const o=new h.ResponseBuilder,i=new m.User(f.default,e);try{const e=await i.getAll();o.setData(e),o.handleSuccess(`Found ${e.length} users.`,t)}catch(e){o.handleError(e,t)}t.json(o)}),w.post("/",p.default("carbooking/media/users/profile").single("userImageSrc"),u.default,async({user:e,body:t,file:o={}},i,n)=>{const{location:s=null}=o,l=new h.ResponseBuilder,c=new m.User(f.default,e);let d=!1,u=t.email,p=e&&e.clientId||null;if(t.inviteToken){const e=r.default.verify(t.inviteToken,g.default.secretKey);e&&(d=!0,u=e.email,p=e.clientId||null)}try{let e=await a.default.hash(t.password,10),o=await c.create({...t,userImageSrc:s,email:u,password:e,clientId:p},{invited:d});l.setData({createdUser:o,categories:(await o.getCategories()).map(e=>e.id)}),l.setMessage("User has been created."),l.setCode(200),l.setSuccess(!0),i.status(200)}catch(e){l.setMessage(e.message),e instanceof y.InvalidPermissionException?(l.setCode(422),i.status(422)):(l.setMessage(e.message),l.setCode(403),i.status(403)),e.errors&&e.errors.length>0&&e.errors.forEach(e=>l.appendError(e.path))}i.json(l),n()},l.default),w.get("/:id",c.default,async({user:e,params:t},o)=>{const i=new h.ResponseBuilder,n=new m.User(f.default,e);try{const e=await n.get(t.id);i.setData({...e.get({plain:!0}),categories:(await e.getCategories()).map(e=>e.id)}),i.setCode(200),i.setMessage(`User with ID ${t.id} found.`),i.setSuccess(!0)}catch(e){e instanceof y.ResourceNotFoundException?(o.status(404),i.setCode(404)):(o.status(403),i.setCode(403)),i.setMessage(e.message)}o.json(i)}),w.patch("/:id",c.default,p.default("carbooking/media/users/profile").single("userImageSrc"),u.default,async({user:e,body:t,file:o={},params:i},n,a)=>{const r=o&&o.filename&&h.getFileURL("carbooking/media/users/profile",o.filename);let l=new h.ResponseBuilder;const c=new m.User(f.default,e);try{let e=await c.get(t.id);if(r&&s.addReplacedFiles(n,{url:e.userImageSrc,model:f.default.User,field:"userImageSrc"}),t.categories){let o=await f.default.Category.findAll({where:{id:t.categories}});await e.$set("categories",o)}let o=await c.update(e.id,{...t,userImageSrc:r||e.userImageSrc});l.setData(o.get({plain:!0})),l.setCode(200),l.setMessage(`User with ID ${i.id} updated.`),l.setSuccess(!0)}catch(e){console.log(e),e instanceof y.InvalidPermissionException?(l.setMessage(e.message),l.setCode(422),n.status(422)):(l.setCode(403),n.status(403)),e.errors&&e.errors.length>0&&e.errors.forEach(e=>l.appendError(e.path))}n.json(l),a()},l.default,s.deleteReplacedFiles),w.delete("/:id",c.default,d.default,async({user:e,params:t},o,i)=>{let n=new h.ResponseBuilder;const a=new m.User(f.default,e);try{let e=await a.delete(t.id);s.addReplacedFiles(o,{url:e.userImageSrc,model:f.default.User,field:"userImageSrc"}),n.setCode(200),n.setSuccess(!0),n.setMessage(`User with ID ${t.id} has been deleted.`)}catch(e){e instanceof y.InvalidPermissionException?(n.setMessage(e.message),n.setCode(422),o.status(422)):(n.setCode(403),o.status(403)),e.errors&&e.errors.length>0&&e.errors.forEach(e=>n.appendError(e.path))}o.json(n),i()},s.deleteReplacedFiles),t.default=w},function(e,t){e.exports=require("multer")},function(e,t,o){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=i(o(11)),a=i(o(10)),r=o(2),s=i(o(8)),l=o(1),c=o(7);class d extends a.default{constructor(e,t){super(e),this.user=t}async get(e){let t=this.user.role,o=await this.getUser(e,{attributes:{exclude:[...s.default.getExcludedFields(t,r.Operation.READ,r.Resource.USERS),"password"]}});if(!o)throw new c.ResourceNotFoundException(`User with ID of ${e} is not found.`);if(!await s.default.can(t,r.Operation.READ,r.Resource.USERS,{accessor:this.user,target:o}))throw new c.InvalidPermissionException;return o}async getAll(){let e=this.user.role,t=await this.getUsers({attributes:{exclude:[...s.default.getExcludedFields(e,r.Operation.READ,r.Resource.USERS),"password"]}}),o=[];for(let i of t){await s.default.can(e,r.Operation.READ,r.Resource.USERS,{accessor:this.user,target:i})&&o.push(i)}return o}async update(e,t,o){let i=this.user.role,a=await this.get(e);if(!a)throw new c.ResourceNotFoundException(`User with ID of ${e} is not found.`);if(!await s.default.can(i,r.Operation.UPDATE,r.Resource.USERS,{accessor:this.user,target:a,body:t}))throw new c.InvalidPermissionException;let d=t.password&&await n.default.hash(t.password,10);return await a.update({...l.exceptFields(t,["categories"]),password:t.password&&d},o),this.get(e)}async delete(e){let t=this.user.role,o=await this.get(e);if(!o)throw new c.ResourceNotFoundException(`User with ID of ${e} is not found.`);if(!await s.default.can(t,r.Operation.DELETE,r.Resource.USERS,{accessor:this.user,target:o}))throw new c.InvalidPermissionException;return await o.destroy(),o}async create(e,t={}){return await this.createUser({...e,role:t.invited?r.Role.GUEST:e.role,approved:!t.invited})}}t.default=d},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class i{constructor(e){this.name=e,this.roles=[]}addRole(e){if(this.roles.find(t=>t.name===e.name))throw new Error("Role already exists");this.roles.push(e)}can(e,t,o,i){return new Promise(async a=>{let r=this.roles.find(t=>e instanceof n?e.name===t.name:e===t.name);if(!r)throw new Error("Role does not exist.");a(await r.can(t,o,i))})}getExcludedFields(e,t,o){let i=this.roles.find(t=>t.name===e);if(i){let e=[];if(i.extends)for(let n of i.extends){let i=n.actions.find(e=>e.name===t&&e.resource.name===o);i&&e.push(...i.excludedFields)}let n=i.actions.find(e=>e.name===t&&e.resource.name===o);return n&&e.push(...n.excludedFields),e}throw new Error("Role does not exist.")}toObject(){return{name:this.name,roles:this.roles.map(e=>({name:e.name,access:e.actions.reduce((e,t)=>(e.resources[t.resource.name]||(e.resources[t.resource.name]={permissions:{}}),e.resources[t.resource.name].permissions[t.name]={conditional:!!t.condition,excludedFields:t.excludedFields},e),{resources:{}}),extends:e.extends.map(e=>e.name)}))}}}t.RBAC=i;class n{constructor(e){this.name=e,this.actions=[],this.extends=[]}addPermission(e){if(this.actions.find(t=>t.name===e.name&&t.resource.name===e.resource.name))throw new Error("Action already exists.");this.actions.push(e)}extend(e){this.extends.push(e)}can(e,t,o){return new Promise(async i=>{let n=this.actions,r=t instanceof a?t.name:t;for(let t=0;t<n.length;t++){let a=n[t];if(e===a.name&&a.resource.name===r){let e;try{e=await a.perform(o)}catch(t){e=!1}if(e)return i(e)}}if(this.extends)for(let n=0;n<this.extends.length;n++){let a=this.extends[n],r=await a.can(e,t,o);if(r)return i(r)}return i(!1)})}}t.Role=n;t.Action=class{constructor(e,t,o,i=[]){this.name=e,this.resource=t,this.condition=o,this.excludedFields=i}perform(e){return!this.condition||this.condition(e)}};class a{constructor(e){this.name=e}}t.Resource=a,t.default=i},function(e,t,o){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=o(14),a=o(15),r=i(o(10)),s=o(2),l=i(o(8)),c=o(7),d=o(1),u=o(2),p=o(0),f=o(18);class h extends r.default{constructor(e,t){super(e),this.user=t}async get(e){let t=this.user.role,o=await this.getBooking(e,{include:[{model:p.User}],attributes:{exclude:l.default.getExcludedFields(t,s.Operation.READ,s.Resource.USERS)}});if(!o)throw new c.ResourceNotFoundException(`User with ID of ${e} is not found.`);if(!await l.default.can(t,s.Operation.READ,s.Resource.BOOKINGS,{accessor:this.user,target:o}))throw new c.InvalidPermissionException;return o}async getAll(){let e=this.user.role,t=await this.getBookings({attributes:{exclude:l.default.getExcludedFields(e,s.Operation.READ,s.Resource.USERS)},include:[{model:p.User}]}),o=[];for(let i of t){await l.default.can(e,s.Operation.READ,s.Resource.BOOKINGS,{accessor:this.user,target:i})&&o.push(i)}return o}async update(e,t){let o=this.user.role,i=await this.get(e);if(!await l.default.can(o,s.Operation.UPDATE,s.Resource.BOOKINGS,{accessor:this.user,target:i,body:t}))throw new c.InvalidPermissionException;if(t.replaceVehicle){const e=await this.db.ReplaceVehicle.findByPk(i.replaceVehicleId);e?await e.update(t.replaceVehicle):await e.create(t.replaceVehicle)}else if(null!==i.replaceVehicle&&void 0===t.replaceVehicle){(await this.db.ReplaceVehicle.findByPk(i.replaceVehicleId)).destroy()}return await i.update({...t,from:t.from&&d.toMySQLDate(t.from),to:t.from&&d.toMySQLDate(t.to)}),this.get(e)}async delete(e){let t=this.user.role,o=await this.get(e);if(!await l.default.can(t,s.Operation.DELETE,s.Resource.BOOKINGS,{accessor:this.user,target:o}))throw new c.InvalidPermissionException;return await o.destroy(),o}async create(e){let t,o=this.user.role,i=await l.default.can(o,s.Operation.CREATE,s.Resource.BOOKINGS,{accessor:this.user,body:e});try{if(!i)throw new c.InvalidPermissionException;if(e.bookingType===u.BookingType.REPLACEMENT){const{brand:o,model:i,plateNumber:n,vin:a}=e;t=await this.db.ReplaceVehicle.create({brand:o,model:i,plateNumber:n,vin:a})}let r=l.default.getExcludedFields(o,s.Operation.CREATE,s.Resource.BOOKINGS),h=await this.createBooking({userId:o===s.Role.GUEST?this.user.id:e.userId,...d.exceptFields(e,r),to:d.toMySQLDate(e.to),from:d.toMySQLDate(e.from),replaceVehicleId:t&&t.id||null}),g=await this.getUser(o===s.Role.GUEST?this.user.id:e.userId);return this.user.role===s.Role.GUEST&&p.User.findAll({where:{clientId:g.clientId,role:{[a.Op.in]:[s.Role.ADMIN,s.Role.KEY_MANAGER]}}}).then(async t=>{const o=await p.Vehicle.findByPk(e.vehicleId),i=await p.Location.findByPk(o.locationId);let a=i.lng,r=i.lat;if(o.wialonUnitId){const e=await n.Wialon.login({token:process.env.WIALON_TOKEN}),t=await e.Core.searchItem({id:o.wialonUnitId,flags:9216});t&&(r=t.item&&t.item.pos&&t.item.pos.y,a=t.item&&t.item.pos&&t.item.pos.x)}for(const e of t)try{f.sendBookingNotification({email:e.email,company:"LeasePlan",bookingId:h.id,customerEmail:this.user.email,customerName:`${this.user.firstName} ${this.user.lastName}`,from:h.from,to:h.to,lat:r,lng:a,location:i.name,mobile:this.user.mobileNumber,plateNumber:o.plateNumber||"N/A",vehicle:`${o.brand} ${o.model}`,vehicleId:o.id,timeZone:e.timeZone})}catch(e){}}),h}catch(e){throw t&&await t.destroy(),e}}}t.default=h},function(e,t,o){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=i(o(10)),a=o(2),r=i(o(8)),s=o(7),l=o(1);class c extends n.default{constructor(e,t){super(e),this.user=t}async get(e){let t=this.user.role,o=await this.getVehicle(e,{attributes:{exclude:r.default.getExcludedFields(t,a.Operation.READ,a.Resource.VEHICLES)}});if(!o)throw new s.ResourceNotFoundException(`User with ID of ${e} is not found.`);if(!await r.default.can(t,a.Operation.READ,a.Resource.VEHICLES,{accessor:this.user,target:o}))throw new s.InvalidPermissionException;return o}async getAll(){let e=this.user.role,t=await this.getVehicles({attributes:{exclude:r.default.getExcludedFields(e,a.Operation.READ,a.Resource.VEHICLES)}}),o=[];for(let i of t){await r.default.can(e,a.Operation.READ,a.Resource.VEHICLES,{accessor:this.user,target:i})&&o.push(i)}return o}async update(e,t){let o=this.user.role,i=await this.get(e);if(!await r.default.can(o,a.Operation.UPDATE,a.Resource.VEHICLES,{accessor:this.user,target:i,body:t}))throw new s.InvalidPermissionException;return await i.update(l.exceptFields(t,["categories"])),this.get(e)}async delete(e){let t=this.user.role,o=await this.get(e);if(!await r.default.can(t,a.Operation.DELETE,a.Resource.VEHICLES,{accessor:this.user,target:o}))throw new s.InvalidPermissionException;return await o.destroy(),o}async create(e){let t=this.user.role;if(!await r.default.can(t,a.Operation.CREATE,a.Resource.VEHICLES,{accessor:this.user,body:e}))throw new s.InvalidPermissionException;return await this.createVehicle(e)}}t.default=c},function(e,t,o){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=i(o(10)),a=o(2),r=i(o(8)),s=o(7),l=o(0);class c extends n.default{constructor(e,t){super(e),this.user=t}async get(e){let t=this.user.role,o=await this.getLocation(e,{include:[{model:l.Client}],attributes:{exclude:r.default.getExcludedFields(t,a.Operation.READ,a.Resource.LOCATIONS)}});if(!o)throw new s.ResourceNotFoundException(`User with ID of ${e} is not found.`);if(!await r.default.can(t,a.Operation.READ,a.Resource.LOCATIONS,{accessor:this.user,target:o}))throw new s.InvalidPermissionException;return o}async getAll(){let e=this.user.role,t=await this.getLocations({include:[{model:l.Client}],attributes:{exclude:r.default.getExcludedFields(e,a.Operation.READ,a.Resource.LOCATIONS)}}),o=[];for(let i of t){await r.default.can(e,a.Operation.READ,a.Resource.LOCATIONS,{accessor:this.user,target:i})&&o.push(i)}return o}async update(e,t){let o=this.user.role,i=await this.get(e);if(!await r.default.can(o,a.Operation.UPDATE,a.Resource.LOCATIONS,{accessor:this.user,target:i,body:t}))throw new s.InvalidPermissionException;return await i.update(t),this.get(e)}async delete(e){let t=this.user.role,o=await this.get(e);if(!await r.default.can(t,a.Operation.DELETE,a.Resource.LOCATIONS,{accessor:this.user,target:o}))throw new s.InvalidPermissionException;return await o.destroy(),o}async create(e){let t=this.user.role;if(!await r.default.can(t,a.Operation.CREATE,a.Resource.LOCATIONS,{accessor:this.user,body:e}))throw new s.InvalidPermissionException;return await this.createLocation(e)}}t.default=c},function(e,t,o){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=o(15),a=i(o(27)),r=i(o(10)),s=o(0),l=o(2),c=i(o(8)),d=o(7);class u extends r.default{constructor(e,t){super(e,t,l.Resource.CLIENTS),this.get=async e=>{let t=this.user.role,o=await this.getClient(e,{attributes:{exclude:c.default.getExcludedFields(t,l.Operation.READ,l.Resource.CLIENTS)}});if(!o)throw new d.ResourceNotFoundException(`Client with ID of ${e} is not found.`);if(!await c.default.can(t,l.Operation.READ,l.Resource.CLIENTS,{accessor:this.user,target:o}))throw new d.InvalidPermissionException;return o},this.update=async(e,t)=>{let o=await this.get(e);const{access:i,excludedFields:r}=await this.getUserPermissions(l.Operation.UPDATE,{accessor:this.user,target:o});if(!i)throw new d.InvalidPermissionException;return t.locations&&!r.includes("locations")&&(await o.setLocations(t.locations),await s.Vehicle.update({clientId:null},{where:{clientId:e,locationId:{[n.Op.notIn]:t.locations}}})),t.users&&!r.includes("users")&&await o.setUsers(t.users),t.vehicles&&!r.includes("vehicles")&&await o.setVehicles(t.vehicles),await o.update(a.default.omit(t,[...r,"locations","users","vehicles"])),[o,await this.get(e)]}}async getAll(){let e=this.user.role,t=await this.getClients({attributes:{exclude:c.default.getExcludedFields(e,l.Operation.READ,l.Resource.CLIENTS)}}),o=[];for(let i of t){await c.default.can(e,l.Operation.READ,l.Resource.CLIENTS,{accessor:this.user,target:i})&&o.push(i)}return o}async delete(e){let t=this.user.role,o=await this.get(e);if(!await c.default.can(t,l.Operation.DELETE,l.Resource.CLIENTS,{accessor:this.user,target:o}))throw new d.InvalidPermissionException;return await o.destroy(),o}async create(e){let t=this.user.role;if(!await c.default.can(t,l.Operation.CREATE,l.Resource.CLIENTS,{accessor:this.user,body:e}))throw new d.InvalidPermissionException;return await this.createClient(e)}}t.default=u},function(e,t,o){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=i(o(10)),a=o(2),r=i(o(8)),s=o(7),l=o(1);class c extends n.default{constructor(e,t){super(e),this.user=t}async get(e){let t=this.user.role,o=await this.getAccident(e,{attributes:{exclude:r.default.getExcludedFields(t,a.Operation.READ,a.Resource.ACCIDENTS)}});if(!o)throw new s.ResourceNotFoundException(`User with ID of ${e} is not found.`);if(!await r.default.can(t,a.Operation.READ,a.Resource.ACCIDENTS,{accessor:this.user,target:o}))throw new s.InvalidPermissionException;return o}async getAll(){let e=this.user.role,t=await this.getAccidents({attributes:{exclude:r.default.getExcludedFields(e,a.Operation.READ,a.Resource.ACCIDENTS)}}),o=[];for(let i of t){await r.default.can(e,a.Operation.READ,a.Resource.ACCIDENTS,{accessor:this.user,target:i})&&o.push(i)}return o}async update(e,t){let o=this.user.role,i=await this.get(e);if(!await r.default.can(o,a.Operation.UPDATE,a.Resource.ACCIDENTS,{accessor:this.user,target:i,body:t}))throw new s.InvalidPermissionException;if(await i.update(t),t.read){let e=await this.getUser(this.user.id);i.setUserStatus(e,{through:{read:!0}})}return[i,this.get(e)]}async delete(e){let t=this.user.role,o=await this.get(e);if(!await r.default.can(t,a.Operation.DELETE,a.Resource.ACCIDENTS,{accessor:this.user,target:o}))throw new s.InvalidPermissionException;return await o.destroy(),o}async create(e){let t=this.user.role,o=await r.default.can(t,a.Operation.CREATE,a.Resource.ACCIDENTS,{accessor:this.user,body:e});const i=await this.getVehicle(e.vehicleId);if(!i)throw new s.InvalidInputException("Vehicle is not found.",["vehicleId"]);if(!o)throw new s.InvalidPermissionException;return await i.update({defleeted:!0}),this.createAccident(l.exceptFields(e,r.default.getExcludedFields(t,a.Operation.CREATE,a.Resource.ACCIDENTS)))}}t.default=c},function(e,t,o){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=i(o(4)),a=o(1),r=o(18),s=i(o(6)),l=i(o(21)),c=i(o(0)),d=n.default.Router();d.use(s.default),d.use(l.default),d.post("/",async({body:e,user:t},o)=>{let i=new a.ResponseBuilder;if(e.email)try{if(await c.default.User.findOne({where:{email:e.email}}))throw new Error("Email is already registered.");await r.sendInvite({email:e.email,clientId:t.clientId}),i.handleSuccess(`Invite has been sent to ${e.email}`,o)}catch(e){i.handleError(e,o)}else i.setMessage("Please provide an email address."),i.setCode(422);o.json(i)}),t.default=d},function(e,t,o){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}},n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)Object.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});const a=i(o(4)),r=o(14),s=i(o(6)),l=o(19),c=i(o(21)),d=i(o(22)),u=i(o(23)),p=i(o(20)),f=n(o(0)),h=o(1),g=o(9),m=o(13),y=i(o(17)),w=o(2),v=a.default.Router();v.use(s.default),v.get("/",async({user:e,query:t},o)=>{const i=new h.ResponseBuilder;try{let n=[];const a=t.from&&Number(t.from),r=t.to&&Number(t.to);n=a&&r?(await g.Vehicle.getAll(e,{from:y.default(a,"X").toDate(),to:y.default(r,"X").toDate()})).cast(e):(await g.Vehicle.getAll(e)).cast(e),i.setData(n),i.handleSuccess(`Found ${n.length} vehicles.`,o)}catch(e){i.handleError(e,o)}o.json(i)}),v.post("/",u.default("carbooking/media/vehicles").single("vehicleImageSrc"),d.default,c.default,async({user:e,body:t,file:o},i,n)=>{const a=o&&o.filename&&h.getFileURL("carbooking/media/vehicles",o.filename);let r=new h.ResponseBuilder;const s=new m.Vehicle(f.default,e);try{let e=await s.create({...t,vehicleImageSrc:a});if(t.categories){let o=await f.default.Category.findAll({where:{id:t.categories}});await e.setCategories(o)}r.setData({...e.get({plain:!0}),categories:await e.getCategories().map(e=>e.id)}),r.handleSuccess("Vehicle has been created.",i)}catch(e){r.handleError(e,i)}i.json(r),n()},p.default),v.get("/:id",async({user:e,params:t},o)=>{let i=new h.ResponseBuilder;const n=new m.Vehicle(f.default,e);try{const e=await n.get(t.id),a={...e.get({plain:!0}),position:null,mileage:null,categories:(await e.getCategories()).map(e=>e.id)};if(e.wialonUnitId)try{let e=await r.Wialon.login({token:process.env.WIALON_TOKEN});const t=await e.Core.searchItem({id:a.wialonUnitId,flags:9216}),o=t.item.pos.x,i=t.item.pos.y,n=t.item.cnm;a.position=i&&o?{lat:i,lng:o}:null,a.mileage=n||null}catch(e){console.error(e)}i.setData(a),i.handleSuccess(`Vehicle with ID ${t.id} found.`,o)}catch(e){i.handleError(e,o)}o.json(i)}),v.patch("/:id",u.default("carbooking/media/vehicles").single("vehicleImageSrc"),d.default,c.default,async(e,t,o)=>{const{user:i,params:n,body:a,file:r}=e,s=r&&r.filename&&h.getFileURL("carbooking/media/vehicles",r.filename);let c=new h.ResponseBuilder;const d=new m.Vehicle(f.default,i);try{let e=await d.update(n.id,{...a,vehicleImageSrc:s});if(s&&l.addReplacedFiles(t,{url:e.vehicleImageSrc,model:f.default.Vehicle,field:"vehicleImageSrc"}),a.categories){let t=await f.default.Category.findAll({where:{id:a.categories}});await e.setCategories(t)}c.setData({...e.get({plain:!0}),categories:(await e.getCategories()).map(e=>e.id)}),c.handleSuccess(`Vehicle with ID ${n.id} updated.`,t)}catch(e){c.handleError(e,t)}t.json(c),o()},p.default,l.deleteReplacedFiles),v.delete("/:id",c.default,async({user:e,params:t},o,i)=>{let n=new h.ResponseBuilder;const a=new m.Vehicle(f.default,e);try{const e=await a.delete(t.id);l.addReplacedFiles(o,{url:e.vehicleImageSrc,model:f.default.Vehicle,field:"vehicleImageSrc"}),n.setData(e.get({plain:!0})),n.handleSuccess(`Vehicle with ID ${t.id} has been deleted.`,o)}catch(e){n.handleError(e,o)}o.json(n),i()},l.deleteReplacedFiles),v.get("/:id/location",async({user:e,params:t},o)=>{const i=new h.ResponseBuilder,n=await f.Vehicle.findByPk(t.id,{include:[f.Location]});n?e.role===w.Role.MASTER||n.clientId===e.clientId?(i.setData(n.location||null),i.handleSuccess("Location found.",o)):(o.status(401),i.setCode(401),i.setMessage("You cannot access this vehicle.")):(o.status(404),i.setCode(404),i.setMessage(`Vehicle with id ${t.id} not found.`)),o.json(i.toObject())}),t.default=v},function(e,t,o){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=o(14),a=o(15),r=i(o(17)),s=o(24),l=o(0),c=o(5),d=o(9),u=o(2),p=o(44),f=o(45),h=o(18);class g{constructor(e){this.data=e,this.cast=e=>s.Booking.getValidator(e,d.API_OPERATION.READ).cast(this.data),this.update=async(e,t)=>{var o;try{const i=await this.data.reload({include:[{model:l.ReplaceVehicle}]}),n=s.Booking.getValidator(e,d.API_OPERATION.UPDATE,i);await n.validate(t);const a=n.cast(t),r=a.replaceVehicle&&await l.ReplaceVehicle.create(a.replaceVehicle);r&&i.replaceVehicleId&&await l.ReplaceVehicle.destroy();const c=await this.data.update({...a,replaceVehicleId:null===(o=r)||void 0===o?void 0:o.id});return new g(c)}catch(e){new p.ApiErrorHandler(e)}},this.destroy=async e=>{try{await s.Booking.getValidator(e,d.API_OPERATION.DELETE,this.data).validate(this.data),await this.data.destroy()}catch(e){new p.ApiErrorHandler(e)}},this.setEmailNotificationsToBookingManagers=async()=>{const e=await this.data.reload({include:[{model:l.User}]});await l.User.findAll({where:{clientId:e.user.clientId,role:{[a.Op.in]:[u.Role.ADMIN,u.Role.KEY_MANAGER]}}}).then(async t=>{const o=await l.Vehicle.findByPk(e.vehicleId),i=o&&await l.Location.findByPk(o.locationId);let a=i.lng,s=i.lat;if(o.wialonUnitId){const e=await n.Wialon.login({token:process.env.WIALON_TOKEN}),t=await e.Core.searchItem({id:o.wialonUnitId,flags:9216});t&&(s=t.item&&t.item.pos&&t.item.pos.y,a=t.item&&t.item.pos&&t.item.pos.x)}for(const n of t)try{h.sendBookingNotification({email:n.email,company:"LeasePlan",bookingId:e.id,customerEmail:e.user.email,customerName:`${e.user.firstName} ${e.user.lastName}`,from:r.default(e.from).unix(),to:r.default(e.to).unix(),lat:s,lng:a,location:i.name,mobile:e.user.mobileNumber,plateNumber:o.plateNumber||"N/A",vehicle:`${o.brand} ${o.model}`,vehicleId:o.id,timeZone:n.timeZone})}catch(e){}})},this.sendInvoice=async e=>{const t=await this.data.reload({include:[{model:l.User},{model:l.Vehicle}]});await h.sendInvoice({email:t.user.email,amount:e,customerName:t.user.firstName,vehicleName:`${t.vehicle.brand} ${t.vehicle.model}`,from:r.default(t.from,"X").unix(),to:r.default(t.to,"X").unix(),bookingId:t.id,timeZone:t.user.timeZone})},this.sendBookingConfirmation=async()=>{const e=await this.data.reload({include:[{model:l.User},{model:l.Vehicle}]}),t=await l.Location.findByPk(e.vehicle.locationId);let o=t.lng,i=t.lat;if(e.vehicle.wialonUnitId){const t=await n.Wialon.login({token:process.env.WIALON_TOKEN}),a=await t.Core.searchItem({id:e.vehicle.wialonUnitId,flags:9216});a&&(i=a.item&&a.item.pos&&a.item.pos.y,o=a.item&&a.item.pos&&a.item.pos.x)}await h.sendBookingConfirmation({email:e.user.email,customerName:e.user.firstName,vehicleName:`${e.vehicle.brand} ${e.vehicle.model} ${e.vehicle.plateNumber}`,from:r.default(e.from,"X").unix(),to:r.default(e.to,"X").unix(),bookingId:e.id,address:t&&t.address,parkingLocation:e.vehicle.parkingLocation,lat:i,lng:o,timeZone:e.user.timeZone})}}}t.Booking=g,g.getAll=async e=>{let t=[];return e.role===u.Role.GUEST?t=await e.$get("bookings",{include:[l.Vehicle,l.ReplaceVehicle]}):e.role===u.Role.ADMIN||e.role===u.Role.KEY_MANAGER?t=await l.Booking.findAll({include:[{model:l.User,where:{clientId:e.clientId}},l.Vehicle,l.ReplaceVehicle]}):e.role===u.Role.MASTER&&(t=await l.Booking.findAll({include:[l.Vehicle,l.ReplaceVehicle]})),new f.Collection(t.map(e=>new g(e)))},g.create=async(e,t)=>{var o;try{const i=s.Booking.getValidator(e,d.API_OPERATION.CREATE);await i.validate(t);const n=i.cast(t),a=n.replaceVehicle&&await l.ReplaceVehicle.create(n.replaceVehicle),r=await l.Booking.create({paid:!1,amount:null,...n,replaceVehicleId:(null===(o=a)||void 0===o?void 0:o.id)||null});return new g(r)}catch(e){new p.ApiErrorHandler(e)}},g.get=async(e,t)=>{const o=await l.Booking.findByPk(t,{include:[{all:!0}]});if(!o)throw new c.ItemNotFoundException(`Booking with ${t} does not exist.`);if(e.role===u.Role.GUEST){if(o.userId===e.id)return new g(o)}else if(e.role===u.Role.KEY_MANAGER||e.role===u.Role.ADMIN){if(o.user.clientId===e.clientId)return new g(o)}else if(e.role===u.Role.MASTER)return new g(o)}},function(e,t,o){"use strict";var i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)Object.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t.default=e,t},n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=i(o(25)),r=n(o(17)),s=o(0),l=o(2),c=o(88),d=o(1),u=o(9),p=o(24);class f{}t.Booking=f,f.getValidator=(e,t,o)=>new p.Validator(f.validatorSchema,e,t,o),f.validatorSchema=a.object().shape({paid:a.boolean(),amount:a.number().nullable(),from:a.date().transform((e,t)=>"number"==typeof t?r.default(t,"X").toDate():t),to:a.date().transform((e,t)=>"number"==typeof t?r.default(t,"X").toDate():t),approved:a.boolean().nullable(),finished:a.boolean(),startMileage:a.number().nullable(),endMileage:a.number().nullable(),startFuel:a.number().nullable(),endFuel:a.number().nullable(),userId:a.number(),vehicleId:a.number(),bookingType:a.mixed().oneOf(Object.values(l.BookingType)),replaceVehicleId:a.number().nullable()}).when(["$user","$operation","$target","$data","$casting"],(...e)=>{let[t,o,i,n,p,f]=e;switch(o){case u.API_OPERATION.READ:n.bookingType===l.BookingType.REPLACEMENT&&(f=f.shape({replaceVehicle:a.object().shape({brand:a.string().nullable(),model:a.string().nullable(),vin:a.string().nullable(),plateNumber:a.string().nullable()}).nullable()})),f=f.shape({id:a.number(),from:a.number().transform((e,t)=>r.default(t).unix()),to:a.number().transform((e,t)=>r.default(t).unix()),createdAt:a.number().transform((e,t)=>r.default(t).unix()),updatedAt:a.number().nullable().transform((e,t)=>t&&r.default(t).unix()||null),vehicle:a.object().shape({id:a.number(),brand:a.string(),model:a.string(),vin:a.string(),plateNumber:a.string()})});break;case u.API_OPERATION.UPDATE:{const e=n;f=f.shape({from:a.date().transform((e,t)=>r.default(t,"X").toDate()).test("no-approved","Booking has already been approved",(function(){var o;return!(void 0!==(null===(o=e)||void 0===o?void 0:o.from)&&e.from!==i.from)||(t.role!==l.Role.GUEST||!i.approved)&&(t.role!==l.Role.KEY_MANAGER||!i.finished)})),to:a.date().transform((e,t)=>r.default(t,"X").toDate()).test("no-approved","Booking has already been approved",(function(){var o;return!(void 0!==(null===(o=e)||void 0===o?void 0:o.to)&&e.to!==i.to)||(t.role!==l.Role.GUEST||!i.approved)&&(t.role!==l.Role.KEY_MANAGER||!i.finished)})),finished:c.stripField(a.boolean().test("timeslot-available","This booking is intersects with another booking at the time specified.",(async function(){var t;if(!(void 0!==(null===(t=e)||void 0===t?void 0:t.finished)&&e.finished!==i.finished))return!0;const o=await s.Vehicle.findByPk(i.vehicleId,{include:[{model:s.Booking}]});return!d.isBookingTimeSlotTaken(o.bookings.map(({from:e,to:t,id:o})=>({from:r.default(e).unix(),to:r.default(t).unix(),id:o})),r.default(i.from).unix(),r.default(i.from).unix(),i.id)})),[l.Role.MASTER,l.Role.ADMIN,l.Role.KEY_MANAGER]),userId:a.number().test("no-approved","Booking has already been approved",(function(){var o;return!(void 0!==(null===(o=e)||void 0===o?void 0:o.userId)&&e.userId!==i.userId)||(t.role!==l.Role.GUEST||!i.approved)&&(t.role!==l.Role.KEY_MANAGER||!i.finished)})),vehicleId:a.number().test("no-approved","Booking has already been approved",(function(){var o;return!(void 0!==(null===(o=e)||void 0===o?void 0:o.vehicleId)&&e.vehicleId!==i.vehicleId)||(t.role!==l.Role.GUEST&&t.role!==l.Role.KEY_MANAGER||!i.approved)})),startFuel:c.stripField(a.number().nullable(),[l.Role.MASTER,l.Role.ADMIN,l.Role.KEY_MANAGER]),startMileage:c.stripField(a.number().nullable(),[l.Role.MASTER,l.Role.ADMIN,l.Role.KEY_MANAGER]),approved:c.stripField(a.boolean().nullable().test("no-finished-booking","This booking has already finished.",(function(){var t;return!(void 0!==(null===(t=e)||void 0===t?void 0:t.approved)&&e.approved!==i.approved)||!i.finished})).test("pending-only",(function(){return`Booking has already been ${i.approved?"approved":"denied"}`}),(function(){var t;const o=void 0!==(null===(t=e)||void 0===t?void 0:t.approved)&&e.approved!==i.approved;return!o||(!o||null===i.approved)})).test("booking-expired","Booking has already expired",(function(){var t;return!(void 0!==(null===(t=e)||void 0===t?void 0:t.approved)&&e.approved!==i.approved)||r.default(i.from).isAfter(r.default())})),[l.Role.MASTER,l.Role.ADMIN,l.Role.KEY_MANAGER]),endFuel:c.stripField(a.number().nullable(),[l.Role.MASTER,l.Role.ADMIN,l.Role.KEY_MANAGER]),endMileage:c.stripField(a.number().nullable(),[l.Role.MASTER,l.Role.ADMIN,l.Role.KEY_MANAGER]),paid:c.stripField(a.boolean(),[l.Role.MASTER,l.Role.ADMIN,l.Role.KEY_MANAGER]),replaceVehicle:a.lazy((function(t,o){return e.bookingType===l.BookingType.REPLACEMENT&&i.bookingType!==l.BookingType.REPLACEMENT?a.object().shape({plateNumber:a.string().required(),vin:a.string().required(),brand:a.string().required(),model:a.string().required()}).required():i.bookingType===l.BookingType.REPLACEMENT?a.object().shape({plateNumber:a.string(),vin:a.string(),brand:a.string(),model:a.string()}).transform(e=>{return{...e,...s.ReplaceVehicle.findByPk(i.replaceVehicleId)}}):a.mixed().notRequired().nullable().transform(()=>null)}))});break}case u.API_OPERATION.CREATE:f.shape({paid:c.stripField(a.boolean().default(!1),[l.Role.GUEST],!0),amount:c.stripField(a.number().nullable().default(null),[l.Role.GUEST],!0),userId:a.number().required().test("db-no-exist",({value:e})=>`User with ID ${e} does not exist.`,async e=>Boolean(await s.User.findByPk(e))),vehicleId:a.number().required().test("db-no-exist",({value:e})=>`Vehicle with ID ${e} does not exist.`,async e=>Boolean(await s.Vehicle.findByPk(e))),from:a.date().required().transform((e,t)=>r.default(t,"X").toDate()),to:a.date().required().test("no-lower-than-other","Booking time end cannot be lower than starting time.",(function(e){const{parent:t}=this;return r.default(e,"X")<t.from})).transform((e,t)=>r.default(t,"X").toDate()),bookingType:a.string().oneOf(Object.values(l.BookingType)).required(),replaceVehicle:a.lazy((function(e,t){const{context:o}=t;return o.bookingOptions.bookingType===l.BookingType.REPLACEMENT?a.object().shape({plateNumber:a.string().required(),vin:a.string().required(),brand:a.string().required(),model:a.string().required()}).required():a.mixed().nullable().transform(()=>null).notRequired()}))}).test("timeslot-available","The vehicle is unavailable at the time specified.",(async function(e){if(e&&e.vehicleId&&e.from&&e.to){const t=await s.Vehicle.findByPk(e.vehicleId,{include:[{model:s.Booking}]});return!d.isBookingTimeSlotTaken(t.bookings.map(({from:e,to:t,approved:o,id:i})=>({from:r.default(e).unix(),to:r.default(t).unix(),approved:o,id:i})),e.from,e.to)}return!1})).test("permission","You do not have the permission to do this.",(async function(e){const t=this.options.context.user;if(t.role===l.Role.GUEST&&e.userId===t.id)return!0;if(t.role===l.Role.KEY_MANAGER||t.role===l.Role.ADMIN){if((await s.User.findByPk(t.id)).clientId===t.clientId)return!0}else if(t.role===l.Role.MASTER)return!0;return!1}));break;case u.API_OPERATION.DELETE:f=f.shape({approved:a.boolean().nullable().test("not-approved","Booking has already been approved and cannot be deleted.",e=>!0!==e)})}return f})},function(e,t,o){"use strict";var i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)Object.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});const n=i(o(25));t.requireRole=e=>(function(){const t=this.options.context.user;return!!e.includes(t.role)}),t.selfOnly=(e="userId")=>(function(t){const o=this.options.context.user;if(t[e]===o.id)return!0}),t.stripField=(e,t,o=!1)=>n.lazy((i,a)=>{const r=a.context.user,s=t.includes(r.role);return s&&o?n.mixed().strip(!0):s||o?e:n.mixed().strip(!0)})},function(e,t,o){"use strict";var i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)Object.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});const n=i(o(25)),a=o(2),r=o(9),s=o(24);class l{}t.Vehicle=l,l.getValidator=(e,t,o)=>new s.Validator(l.validatorSchema,e,t,o),l.validatorSchema=n.object().shape({brand:n.string(),model:n.string(),plateNumber:n.string(),vin:n.string(),defleeted:n.boolean(),parkingLocation:n.string().nullable(),vehicleImageSrc:n.string().nullable(),bookingChargeCount:n.number(),bookingChargeUnit:n.mixed().oneOf(Object.values(a.BookingChargeUnit)).nullable(),bookingCharge:n.number(),clientId:n.number().nullable(),locationId:n.number().nullable(),wialonUnitId:n.number().nullable(),available:n.boolean()}).when(["$user","$operation","$target","$data","$casting"],(...e)=>{let[t,o,i,s,l,c]=e;switch(o){case r.API_OPERATION.READ:c=c.shape({id:n.number()});break;case r.API_OPERATION.CREATE:c=c.shape({brand:n.string().required(),model:n.string().required(),bookingChargeCount:n.number().default(0),bookingCharge:n.number().default(0)}).test("permission","You do not have the permission to do this.",(function(){return t.role===a.Role.MASTER}));break;case r.API_OPERATION.UPDATE:c=c.shape({id:n.number().required()}).test("permission","You do not have the permission to do this.",(function(){return t.role===a.Role.MASTER||(t.role===a.Role.ADMIN||t.role===a.Role.KEY_MANAGER)&&i.clientId===t.clientId}))}return c})},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=o(5),n=o(5);t.ApiErrorHandler=class{constructor(e){if(console.log("ApiErrorHandler",e),e instanceof i.FormException){for(const t of e.fields)if(console.log("error fields",t),"permission"===t.name)throw new n.InvalidPermissionException(t.message);throw e}throw new i.ApiException("An unknown error has occurred.")}}},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=o(5);t.FormErrorBuilder=class{constructor(){this.fields=[],this.add=(e,t,o)=>(this.fields.push({field:e,message:t,name:o}),this),this.addIf=(e,t,o,i)=>(e&&this.add(t,o,i),this)}throw(e="An error has occured in one of the fields."){if(this.fields.length)throw new i.FormException(e,this.fields)}}},function(e,t,o){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=o(15),a=i(o(27)),r=o(0),s=o(1),l=o(2),c=o(5),d=o(24),u=o(44),p=o(9);class f{constructor(e){this.data=e,this.cast=e=>d.Vehicle.getValidator(e,p.API_OPERATION.READ).cast(this.data),this.availableForBooking=async(e,t,o)=>{if(!0===this.data.defleeted)return!1;const i=o||await this.data.$get("bookings");for(const o of i){const i=s.getBookingStatus({from:e,to:t,approved:o.approved});if(i===l.BookingStatus.PENDING||i===l.BookingStatus.APPROVED||i===l.BookingStatus.ONGOING)return!1}return!0},this.update=async(e,t)=>{try{await d.Vehicle.getValidator(e,p.API_OPERATION.UPDATE,{newData:t,target:this.data}).validate(t);const o=d.Vehicle.getValidator(e,p.API_OPERATION.UPDATE,{newData:t,target:this.data}).cast(t);await this.data.update(o)}catch(e){new u.ApiErrorHandler(e)}}}}t.Vehicle=f,f.get=async(e,t)=>{const o=await r.Vehicle.findByPk(t);if(e.role===l.Role.MASTER)return new f(o);if(e.clientId===o.clientId)return new f(o);throw new c.InvalidPermissionException("You cannot access this vehicle.")},f.create=async(e,t)=>{try{await d.Vehicle.getValidator(e,p.API_OPERATION.CREATE,{newData:t}).validate(t);const o=await d.Vehicle.getValidator(e,p.API_OPERATION.CREATE,{newData:t}).cast(t),i=await r.Vehicle.create(o);return new r.Booking(i)}catch(e){new u.ApiErrorHandler(e)}},f.getAll=async(e,t)=>{var o,i;let s=[];const c=(null===(o=t)||void 0===o?void 0:o.from)&&(null===(i=t)||void 0===i?void 0:i.to)?{where:{"$bookings.vehicleId$":null},include:[{model:r.Booking,required:!1,where:{to:{[n.Op.lte]:t.to},from:{[n.Op.gte]:t.from}}}]}:{};if(e.role===l.Role.MASTER)s=await r.Vehicle.findAll(c);else if(e.role===l.Role.GUEST){const t=await e.$get("categories");s=t.length?await r.Vehicle.findAll(a.default.merge({where:{clientId:e.clientId},include:[{model:r.Category,where:{id:{[n.Op.in]:t.map(e=>e.id)}}}]},c)):await r.Vehicle.findAll(a.default.merge({where:{clientId:e.clientId}},c))}else e.clientId&&(s=await r.Vehicle.findAll(a.default.merge({where:{clientId:e.clientId}},c)));return new p.Collection(s.map(e=>new f(e)))}},function(e,t,o){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=i(o(4)),a=i(o(6)),r=o(9),s=o(1),l=n.default.Router();l.use(a.default),l.get("/",async({user:e},t)=>{const o=new s.ResponseBuilder;try{const i=await r.Booking.getAll(e);o.handleSuccess(`Found ${i.data.length} bookings.`,t),o.setData(i.cast(e))}catch(e){o.handleError(e,t)}t.json(o)}),l.post("/",async({user:e,body:t},o)=>{const i=new s.ResponseBuilder;try{const n=await r.Booking.create(e,t);n.setEmailNotificationsToBookingManagers(),i.setData(n.cast(e)),i.handleSuccess("Booking has been created.",o)}catch(e){i.handleError(e,o)}o.json(i)}),l.get("/:id",async({user:e,params:t},o)=>{const i=new s.ResponseBuilder;try{let n=await r.Booking.get(e,t.id);i.setData(n.cast(e)),i.handleSuccess(`Booking with ID of ${t.id} found.`,o)}catch(e){i.handleError(e,o)}o.json(i)}),l.patch("/:id",async({user:e,params:t,body:o},i)=>{const n=new s.ResponseBuilder;try{const a=await r.Booking.get(e,t.id),s=await a.update(e,o);void 0!==o.amount&&null!==o.amount&&null===a.data.amount&&s.sendInvoice(o.amount),!0===o.approved&&null===a.data.approved&&s.sendBookingConfirmation(),n.setData(s.cast(e)),n.handleSuccess("Booking has been updated",i)}catch(e){n.handleError(e,i)}i.json(n)}),l.delete("/:id",async({user:e,params:t},o)=>{const i=new s.ResponseBuilder;try{const n=await r.Booking.get(e,t.id);await n.destroy(e),i.setData(n.cast(e)),i.handleSuccess(`Booking with ID ${t.id} has been deleted.`,o)}catch(e){i.handleError(e,o)}o.json(i)}),t.default=l},function(e,t,o){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=i(o(4)),a=i(o(6)),r=i(o(21)),s=i(o(22)),l=i(o(20)),c=o(19),d=i(o(23)),u=i(o(0)),p=o(1),f=o(13),h=n.default.Router();h.use(a.default),h.get("/",async({user:e},t)=>{const o=new p.ResponseBuilder,i=new f.Location(u.default,e);try{const e=await i.getAll();o.setData(e),o.handleSuccess(`Found ${e.length} locations. `,t)}catch(e){o.handleError(e,t)}t.json(o)}),h.post("/",d.default("carbooking/media/locations").single("locationImageSrc"),s.default,r.default,async({user:e,body:t},o)=>{const i=new p.ResponseBuilder,n=new f.Location(u.default,e);try{const e=await n.create(t);i.setData(e),i.handleSuccess("Location has been created.",o)}catch(e){i.handleError(e,o)}o.json(i)},l.default),h.get("/:id",async({user:e,params:t},o)=>{const i=new p.ResponseBuilder,n=new f.Location(u.default,e);try{let e=await n.get(t.id);i.setData(e.get({plain:!0})),i.handleSuccess(`Found location with ID of ${e.id}`,o)}catch(e){i.handleError(e,o)}o.json(i)}),h.patch("/:id",d.default("carbooking/media/locations").single("locationImageSrc"),s.default,r.default,async({user:e,params:t,body:o,file:i={}},n)=>{const a=i&&i.filename&&p.getFileURL("carbooking/media/users/profile",i.filename),r=new p.ResponseBuilder,s=new f.Location(u.default,e);try{const e=await s.update(t.id,o);a&&c.addReplacedFiles(n,{url:e.locationImageSrc,model:u.default.Location,field:"locationImageSrc"}),r.setData(e.get({plain:!0})),r.handleSuccess(`Location with ID ${t.id} updated.`,n)}catch(e){r.handleError(e,n)}n.json(r)},l.default,c.deleteReplacedFiles),h.delete("/:id",async({user:e,params:t},o)=>{let i=new p.ResponseBuilder;const n=new f.Location(u.default,e);try{let e=await n.delete(t.id);i.setData(e.get({plain:!0})),i.handleSuccess(`Location with ID ${t.id} has been deleted.`,o)}catch(e){i.handleError(e,o)}o.json(i)}),t.default=h},function(e,t,o){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=i(o(4)),a=i(o(6)),r=o(19),s=i(o(22)),l=i(o(23)),c=i(o(20)),d=i(o(0)),u=o(1),p=o(13),f=n.default.Router();f.use(a.default),f.get("/",async({user:e},t)=>{const o=new u.ResponseBuilder,i=new p.Accident(d.default,e);try{const e=await i.getAll();o.setData(e),o.handleSuccess(`Found ${e.length} accidents.`,t)}catch(e){o.handleError(e,t)}t.json(o)}),f.post("/",l.default("carbooking/media/accidents").fields([{name:"accidentImageSrc"},{name:"accidentVideoSrc"}]),s.default,async({user:e,body:t,files:o},i,n)=>{const a=new u.ResponseBuilder,r=new p.Accident(d.default,e),s=o&&o.accidentImageSrc&&o.accidentImageSrc[0]&&o.accidentImageSrc[0].filename&&u.getFileURL("carbooking/media/accidents",o.accidentImageSrc[0].filename),l=o&&o.accidentVideoSrc&&o.accidentVideoSrc[0]&&o.accidentVideoSrc[0].filename&&u.getFileURL("carbooking/media/accidents",o.accidentVideoSrc[0].filename);try{const e=await r.create({...t,accidentImageSrc:s,accidentVideoSrc:l});a.setData(e),a.handleSuccess("Accident has been created.",i)}catch(e){a.handleError(e,i)}i.json(a),n()},c.default),f.get("/:id",async({user:e,params:t},o)=>{const i=new u.ResponseBuilder,n=new p.Accident(d.default,e);try{const e=await n.get(t.id);i.setData(e.get({plain:!0})),i.handleSuccess(`Found accident with ID ${t.id}`,o)}catch(e){i.handleError(e,o)}o.json(i)}),f.patch("/:id",l.default("carbooking/media/accidents").fields([{name:"accidentImageSrc"},{name:"accidentVideoSrc"}]),s.default,async({user:e,params:t,body:o,files:i},n,a)=>{const s=new u.ResponseBuilder,l=new p.Accident(d.default,e);try{const e=i&&i.accidentImageSrc&&i.accidentImageSrc[0]&&i.accidentImageSrc[0].filename&&u.getFileURL("carbooking/media/accidents",i.accidentVideoSrc[0].filename),a=i&&i.accidentVideoSrc&&i.accidentVideoSrc[0]&&i.accidentVideoSrc[0].filename&&u.getFileURL("carbooking/media/accidents",i.accidentVideoSrc[0].filename),[c,p]=await l.update(t.id,{...o,accidentImageSrc:e,accidentVideoSrc:a});e&&r.addReplacedFiles(n,{url:c.accidentImageSrc,model:d.default.Accident,field:"accidentImageSrc"}),a&&r.addReplacedFiles(n,{url:c.accidentVideoSrc,model:d.default.Accident,field:"accidentVideoSrc"}),s.setData(p),s.handleSuccess(`Accident with ID ${t.id} has been updated.`,n)}catch(e){s.handleError(e,n)}n.json(s),a()},c.default,r.deleteReplacedFiles),f.delete("/:id",async({user:e,params:t},o,i)=>{const n=new u.ResponseBuilder,a=new p.Accident(d.default,e);try{await a.delete(t.id),n.handleSuccess(`Accident with ID ${t.id} has been deleted.`,o)}catch(e){n.handleError(e,o)}o.json(n),i()}),t.default=f},function(e,t,o){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=i(o(4)),a=i(o(0)),r=o(1),s=i(o(6)),l=n.default.Router();l.get("/",s.default,async(e,t)=>{let o=new r.ResponseBuilder;const i=await a.default.Category.findAll();o.setData(i),o.setSuccess(!0),o.setCode(200),o.setMessage(null),t.json(o)}),l.post("/",s.default,async({body:e},t)=>{let o=new r.ResponseBuilder;const i=await a.default.Category.create({name:e.name,clientId:e.clientId});o.setData(i),o.setSuccess(!0),o.setCode(200),o.setMessage(null),t.json(o)}),l.patch("/:id",s.default,async({params:e,body:t},o)=>{let i=new r.ResponseBuilder;const n=await a.default.Category.findByPk(e.id);n&&n.update({name:t.name,clientId:t.clientId}),i.setData(n),i.setSuccess(!0),i.setCode(200),i.setMessage(null),o.json(i)}),l.delete("/:id",s.default,async({params:e},t)=>{let o=new r.ResponseBuilder;const i=await a.default.Category.findByPk(e.id);i&&await i.destroy(),o.setData(i),o.setSuccess(!0),o.setCode(200),o.setMessage(null),t.json(o)}),t.default=l},function(e,t,o){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}},n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)Object.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});const a=i(o(4)),r=o(1),s=o(13),l=n(o(0)),c=i(o(6)),d=o(2),u=o(7),p=a.default.Router();p.get("/",async({user:e},t)=>{const o=new r.ResponseBuilder,i=new s.Client(l.default,e);try{const e=await i.getAll();o.setData(e),o.handleSuccess(`Found ${e.length} accidents.`,t)}catch(e){o.handleError(e,t)}t.json(o)}),p.post("/",async({user:e,body:t},o)=>{const i=new r.ResponseBuilder,n=new s.Client(l.default,e);try{const a=await n.create({...t,clientId:e.clientId});i.setData(a),i.handleSuccess("Client has been created",o)}catch(e){i.handleError(e,o)}o.json(i)}),p.get("/:id",async({user:e,params:t},o)=>{const i=new r.ResponseBuilder,n=new s.Client(l.default,e);try{const e=await n.get(t.id);i.setData({...e.get({plain:!0}),locations:(await e.getLocations()).map(e=>e.id)}),i.handleSuccess(`Found accident with ID ${t.id}`,o)}catch(e){i.handleError(e,o)}o.json(i)}),p.patch("/:id",async({user:e,params:t,body:o},i)=>{const n=new r.ResponseBuilder,a=new s.Client(l.default,e);try{const[e,r]=await a.update(t.id,o);n.setData(r),n.handleSuccess(`Client with ID ${t.id} has been updated.`,i)}catch(e){n.handleError(e,i)}i.json(n)}),p.delete("/:id",async({user:e,params:t},o)=>{const i=new r.ResponseBuilder;new s.Client(l.default,e);o.json(i)}),p.get("/:id/locations",c.default,async({user:e,params:t},o)=>{const i=new r.ResponseBuilder;try{const o=await l.Client.findByPk(t.id);if(!o)throw new u.ResourceNotFoundException(`User with ID ${t.id} cannot be found.`);if(e.role!==d.Role.MASTER&&o.id!==e.clientId)throw new u.InvalidPermissionException;const n=await l.Location.findAll({include:[{model:l.Client,where:{id:o.id}}]});i.setData(n),i.setSuccess(!0),i.setMessage(`Found ${n.length} locations.`),i.setCode(200)}catch(e){i.handleError(e,o)}o.json(i.toObject())}),t.default=p},function(e,t,o){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=i(o(4)),a=i(o(0)),r=o(1),s=i(o(6)),l=n.default.Router();l.get("/",s.default,async(e,t)=>{let o=new r.ResponseBuilder;const i=await a.default.VehicleIssue.findAll();o.setData(i),o.setSuccess(!0),o.setCode(200),o.setMessage(null),t.json(o)}),l.post("/",s.default,async({body:e},t)=>{let o=new r.ResponseBuilder;const i=await a.default.VehicleIssue.create({message:e.message,vehicleId:e.vehicleId});o.setData(i),o.setSuccess(!0),o.setCode(200),o.setMessage(null),t.json(o)}),l.patch("/:id",s.default,async({params:e,body:t},o)=>{let i=new r.ResponseBuilder;const n=await a.default.VehicleIssue.findByPk(e.id);n&&n.update({message:t.message}),i.setData(n),i.setSuccess(!0),i.setCode(200),i.setMessage(null),o.json(i)}),l.delete("/:id",s.default,async({params:e},t)=>{let o=new r.ResponseBuilder;const i=await a.default.VehicleIssue.findByPk(e.id);i&&await i.destroy(),o.setData(i),o.setSuccess(!0),o.setCode(200),o.setMessage(null),t.json(o)}),t.default=l},function(e,t,o){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=i(o(4)),a=o(14),r=o(1),s=o(5),l=n.default.Router();l.get("/units",async(e,t)=>{const o=new r.ResponseBuilder;try{const e=await a.Wialon.login({token:process.env.WIALON_TOKEN}),i=await e.Utils.getUnits({flags:1025});o.handleSuccess(`Found ${i.items.length} units.`,t),o.setData(i.items)}catch(e){o.handleError(e,t)}t.json(o)}),l.get("/units/:id",async(e,t)=>{const o=new r.ResponseBuilder;try{const i=await a.Wialon.login({token:process.env.WIALON_TOKEN}),n=await i.Utils.getUnits({flags:1025});if(!n.items.find(t=>t.id===e.query.id))throw o.setCode(404),new s.ItemNotFoundException(`Unit with ID ${e.query.id} is not found.`);o.handleSuccess(`Found ${n.items.length} units.`,t),o.setData(n.items)}catch(e){o.handleError(e,t)}t.json(o)}),t.default=l},function(e,t,o){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=i(o(4)),a=o(14),r=o(15),s=o(101),l=o(0),c=o(1),d=o(2),u=n.default.Router();u.use(s.requireHigherOrEqualRole(d.Role.KEY_MANAGER)),u.get("/unit-summary",async({user:e},t)=>{let o=new c.ResponseBuilder;const i=await a.Wialon.login({token:process.env.WIALON_TOKEN});let n={clientId:e.clientId};e.role===d.Role.MASTER&&(n={});let s=(await l.Vehicle.findAll({where:n})).map(e=>e.id),u=await l.Vehicle.findAll({where:n,include:[{model:l.Accident,as:"accidents",where:{userId:{[r.Op.in]:s}},required:!1},{model:l.Booking,as:"bookings",where:{userId:{[r.Op.in]:s}},required:!1},{model:l.Category,as:"categories",where:n,required:!1},{model:l.VehicleIssue,as:"vehicleIssues"},l.Location]});const p=await i.Utils.getUnits({flags:8193}),f=u.map(t=>{const o=p.items.find(e=>e.id===t.wialonUnitId);return{plateNumber:t.plateNumber,brand:t.brand,model:t.model,odometer:o&&o.cnm||null,accidents:t.accidents.length,bookings:t.bookings.filter(e=>e.finished).length,categories:t.categories.map(e=>e.name),issues:t.vehicleIssues.length,defleeted:t.defleeted,wialonUnit:Boolean(o),wialonUnitName:c.RoleUtils.isRoleBetter(d.Role.MASTER,e.role)?o&&o.nm||null:void 0,client:c.RoleUtils.isRoleBetter(d.Role.MASTER,e.role)?t.client&&t.client.name:void 0}});o.setData(f),o.handleSuccess("Report successful.",t),t.json(o)}),t.default=u},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o(102))},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=o(1),n=o(1);t.requireRole=e=>(t,o,n)=>{const a=new i.ResponseBuilder;t.user&&(e instanceof Array&&e.findIndex(e=>t.user.role===e)>=0||e===t.user.role)?n():(a.setMessage("You are not authorized to access this resource."),a.setCode(401),a.setSuccess(!1),o.status(401),o.json(a))},t.requireHigherOrEqualRole=e=>(t,o,a)=>{const r=new i.ResponseBuilder;t.user&&n.RoleUtils.isRoleBetter(e,t.user.role)?a():(r.setMessage("You are not authorized to access this resource."),r.setCode(401),r.setSuccess(!1),o.status(401),o.json(r))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,